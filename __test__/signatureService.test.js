import { SignatureService } from "../src/services/signatureService.js";import fs from "fs";import { PDFDocument } from "pdf-lib";jest.mock("pdf-lib", () => ({    PDFDocument: {        load: jest.fn(),    },}));describe("SignatureService", () => {    let mockRepo;    let mockStorage;    let service;    const dummySignature =        "data:image/png;base64," +        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAusB9YlBcX8AAAAASUVORK5CYII=";    beforeEach(() => {        mockRepo = {            getDocumentById: jest.fn(),            updateDocument: jest.fn(),            getSignatureDetails: jest.fn(),        };        mockStorage = {            downloadFile: jest.fn(),            uploadFile: jest.fn(),        };        // Mock PDFDocument hanya untuk test normal        const fakePdfDoc = {            embedPng: jest.fn().mockResolvedValue("embeddedImage"),            getPage: jest.fn().mockReturnValue({                getSize: () => ({ height: 1000 }),                drawImage: jest.fn(),            }),            save: jest.fn().mockResolvedValue(Buffer.from("signed-pdf")),        };        PDFDocument.load.mockResolvedValue(fakePdfDoc);        service = new SignatureService(mockRepo, mockStorage);    });    // =======================    // TEST BASIC SCENARIOS    // =======================    test("throw error kalau placements kosong", async () => {        await expect(            service.signDocument(1, "user1", { method: "canvas", placements: [] })        ).rejects.toThrow("Informasi penempatan");    });    test("throw error kalau dokumen tidak ditemukan", async () => {        mockRepo.getDocumentById.mockResolvedValue(null);        await expect(            service.signDocument(1, "user1", {                method: "canvas",                signatureImage: dummySignature,                placements: [{ page: 1, x: 10, y: 10, width: 100, height: 50 }],            })        ).rejects.toThrow("Dokumen tidak ditemukan");    });    test("berhasil sign dengan method canvas", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const samplePdf = fs.readFileSync("__test__/fixtures/sample.pdf");        mockStorage.downloadFile.mockResolvedValue(samplePdf);        mockRepo.updateDocument.mockResolvedValue({            id: 1,            status: "completed",            filePath: "signed/test-signed.pdf",        });        const result = await service.signDocument(1, "user1", {            method: "canvas",            signatureImage: dummySignature,            placements: [{ page: 1, x: 10, y: 10, width: 100, height: 50 }],        });        expect(result.status).toBe("completed");        expect(mockRepo.updateDocument).toHaveBeenCalled();        expect(mockStorage.uploadFile).toHaveBeenCalled();    });    test("throw error kalau signatureImage kosong pada method canvas", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const samplePdf = fs.readFileSync("__test__/fixtures/sample.pdf");        mockStorage.downloadFile.mockResolvedValue(samplePdf);        await expect(            service.signDocument(1, "user1", {                method: "canvas",                signatureImage: null,                placements: [{ page: 1, x: 10, y: 10, width: 100, height: 50 }],            })        ).rejects.toThrow("Signature image tidak boleh kosong");    });    test("berhasil sign dengan method qrcode", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const samplePdf = fs.readFileSync("__test__/fixtures/sample.pdf");        mockStorage.downloadFile.mockResolvedValue(samplePdf);        mockRepo.updateDocument.mockResolvedValue({            id: 1,            status: "completed",            filePath: "signed/test-signed.pdf",        });        const result = await service.signDocument(1, "user1", {            method: "qrcode",            placements: [{ page: 1, x: 20, y: 20, width: 100, height: 100 }],        });        expect(result.status).toBe("completed");        expect(mockRepo.updateDocument).toHaveBeenCalled();        expect(mockStorage.uploadFile).toHaveBeenCalled();    });    test("throw error kalau method tidak valid", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const samplePdf = fs.readFileSync("__test__/fixtures/sample.pdf");        mockStorage.downloadFile.mockResolvedValue(samplePdf);        await expect(            service.signDocument(1, "user1", {                method: "invalid",                placements: [{ page: 1, x: 10, y: 10, width: 100, height: 50 }],            })        ).rejects.toThrow("Metode tidak valid");    });    // =======================    // TEST VERIFY SIGNATURE    // =======================    test("verifySignature return false kalau signature tidak ada", async () => {        mockRepo.getSignatureDetails.mockResolvedValue(null);        const result = await service.verifySignature(1, "user1");        expect(result.valid).toBe(false);    });    test("verifySignature return true kalau signature ditemukan", async () => {        mockRepo.getSignatureDetails.mockResolvedValue({            document: { title: "test.pdf" },            user: { name: "Indra", email: "indra@test.com" },            signedAt: new Date(),        });        const result = await service.verifySignature(1, "user1");        expect(result.valid).toBe(true);        expect(result.data.signerName).toBe("Indra");    });    // =======================    // TEST TAMBAHAN UNTUK STRYKER    // =======================    test("support fileBlob with arrayBuffer", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const fakeBlob = {            arrayBuffer: async () => Buffer.from("fake-pdf-buffer"),        };        mockStorage.downloadFile.mockResolvedValue(fakeBlob);        mockRepo.updateDocument.mockResolvedValue({            id: 1,            status: "completed",            filePath: "signed/test-signed.pdf",        });        const result = await service.signDocument(1, "user1", {            method: "canvas",            signatureImage: dummySignature,            placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }],        });        expect(result.status).toBe("completed");    });    test("berhasil sign dengan multiple placements", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const fakeBlob = Buffer.from("fake-pdf-buffer");        mockStorage.downloadFile.mockResolvedValue(fakeBlob);        mockRepo.updateDocument.mockResolvedValue({            id: 1,            status: "completed",            filePath: "signed/test-signed.pdf",        });        const result = await service.signDocument(1, "user1", {            method: "canvas",            signatureImage: dummySignature,            placements: [                { page: 1, x: 10, y: 10, width: 50, height: 50 },                { page: 1, x: 60, y: 60, width: 50, height: 50 },            ],        });        expect(result.status).toBe("completed");    });    test("throw error kalau fileBlob tidak buffer dan tidak punya arrayBuffer", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        mockStorage.downloadFile.mockResolvedValue({}); // objek kosong        await expect(            service.signDocument(1, "user1", {                method: "canvas",                signatureImage: dummySignature,                placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }],            })        ).rejects.toThrow("Unsupported file type from fileStorage");    });    // =======================    // TEST PDF CORRUPT UNTUK STRYKER    // =======================    test("throw error kalau file PDF corrupt", async () => {        mockRepo.getDocumentById.mockResolvedValue({            id: 1,            title: "test.pdf",            filePath: "files/test.pdf",        });        const corruptBuffer = Buffer.from("INI BUKAN FILE PDF");        mockStorage.downloadFile.mockResolvedValue(corruptBuffer);        // Override PDFDocument.load hanya untuk test ini supaya throw error        PDFDocument.load.mockImplementationOnce(() => {            throw new Error("Gagal memproses PDF");        });        await expect(            service.signDocument(1, "user1", {                method: "canvas",                signatureImage: dummySignature,                placements: [{ page: 1, x: 10, y: 10, width: 100, height: 50 }],            })        ).rejects.toThrow("Gagal memproses PDF");    });});