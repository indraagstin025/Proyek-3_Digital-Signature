import { createSignatureController } from "../src/controllers/signatureController.js";// Mock service sesuai controllerconst mockSignatureService = {    signDocument: jest.fn(),    VerifySignature: jest.fn(), // huruf V kapital sesuai controller};// Buat instance controller dengan mock serviceconst signatureController = createSignatureController(mockSignatureService);// Fungsi untuk mock requestconst mockRequest = (params = {}, body = {}, query = {}, user = {}) => ({    params,    body,    query,    user,});// Fungsi untuk mock responseconst mockResponse = () => {    const res = {};    res.status = jest.fn().mockReturnValue(res);    res.json = jest.fn().mockReturnValue(res);    return res;};// Bersihkan mock sebelum setiap testbeforeEach(() => {    mockSignatureService.signDocument.mockClear();    mockSignatureService.VerifySignature.mockClear();});describe('handleSignDocument', () => {    test('harus mengembalikan status 200 dan data hasil jika berhasil', async () => {        const req = mockRequest(            { id: '1' },            { method: 'canvas', placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }], signatureImage: 'base64image' },            {},            { userId: 'user123' }        );        const res = mockResponse();        const mockResult = { status: 'completed' };        mockSignatureService.signDocument.mockResolvedValue(mockResult);        await signatureController.handleSignDocument(req, res);        expect(res.status).toHaveBeenCalledWith(200);        expect(res.json).toHaveBeenCalledWith({            message: 'Dokumen berhasil ditandatangani dan disimpan. ',            data: mockResult,        });        expect(mockSignatureService.signDocument).toHaveBeenCalledWith(            '1',            'user123',            { method: 'canvas', signatureImage: 'base64image', placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }] }        );    });    test('harus mengembalikan status 400 jika method atau placements tidak ada', async () => {        const req = mockRequest({ id: '1' }, { method: 'canvas' }, {}, { userId: 'user123' });        const res = mockResponse();        await signatureController.handleSignDocument(req, res);        expect(res.status).toHaveBeenCalledWith(400);        expect(res.json).toHaveBeenCalledWith({            message: 'Method (method) dan data penempatan (placements) diperlukan.',        });        expect(mockSignatureService.signDocument).not.toHaveBeenCalled();    });    test('harus mengembalikan status 500 jika terjadi error pada service', async () => {        const req = mockRequest(            { id: '1' },            { method: 'canvas', placements: [], signatureImage: 'base64image' },            {},            { userId: 'user123' }        );        const res = mockResponse();        const serviceError = new Error('Dokumen tidak ditemukan.');        mockSignatureService.signDocument.mockRejectedValue(serviceError);        await signatureController.handleSignDocument(req, res);        expect(res.status).toHaveBeenCalledWith(500);        expect(res.json).toHaveBeenCalledWith({            message: 'Terjadi kesalahan server.',            error: serviceError.message,        });    });});describe('handleVerifySignature', () => {    test('harus mengembalikan status 200 dan data verifikasi jika berhasil', async () => {        const req = mockRequest({}, {}, { docId: '1', userId: 'user123' });        const res = mockResponse();        const mockResult = { valid: true, message: 'Tanda tangan terverifikasi.' };        mockSignatureService.VerifySignature.mockResolvedValue(mockResult);        await signatureController.handleVerifySignature(req, res);        expect(res.status).toHaveBeenCalledWith(200);        expect(res.json).toHaveBeenCalledWith(mockResult);        expect(mockSignatureService.VerifySignature).toHaveBeenCalledWith('1', 'user123');    });    test('harus mengembalikan status 400 jika docId atau userId tidak ada', async () => {        const req = mockRequest({}, {}, { docId: '1' }, {});        const res = mockResponse();        await signatureController.handleVerifySignature(req, res);        expect(res.status).toHaveBeenCalledWith(400);        expect(res.json).toHaveBeenCalledWith({            message: 'Parameter docId dan UserId diperlukan untuk verifikasi. ',        });        expect(mockSignatureService.VerifySignature).not.toHaveBeenCalled();    });    test('harus mengembalikan status 500 jika terjadi error pada service', async () => {        const req = mockRequest({}, {}, { docId: '1', userId: 'user123' }, {});        const res = mockResponse();        const serviceError = new Error('Tanda tangan tidak ditemukan.');        mockSignatureService.VerifySignature.mockRejectedValue(serviceError);        await signatureController.handleVerifySignature(req, res);        expect(res.status).toHaveBeenCalledWith(500);        expect(res.json).toHaveBeenCalledWith({            message: 'Terjadi kesalahan di server. ',            error: serviceError.message,        });    });});