// __test__/controllers/authController.test.js/** * PENTING: * - Semua jest.mock() HARUS didefinisikan sebelum import modul yang menggunakannya. * - Hindari akses variabel sebelum dideklarasikan (ReferenceError). * - Jest melakukan hoisting terhadap jest.mock(), jadi semua mock harus mandiri. */// --- Mocking Dependencies ---jest.mock("cookie", () => {    const mockSerialize = jest.fn(        (name, value, options) => `${name}=${value}; Max-Age=${options.maxAge}`    );    return { serialize: mockSerialize };});// Import controller SETELAH mock dibuatimport { createAuthController } from "../../src/controllers/authController.js";// Ambil mock serialize agar bisa diverifikasi di testimport * as cookie from "cookie";const mockSerialize = cookie.serialize;// --- Mocking Express Request (req) dan Response (res) ---const mockRequest = (options) => ({    body: {},    ...options,});const mockResponse = () => {    const res = {};    res.status = jest.fn().mockReturnThis();    res.json = jest.fn().mockReturnThis();    res.setHeader = jest.fn().mockReturnThis();    return res;};const mockNext = jest.fn();// --- Mock AuthService ---const mockAuthService = {    registerUser: jest.fn(),    loginUser: jest.fn(),    logoutUser: jest.fn(),    forgotPassword: jest.fn(),    resetPassword: jest.fn(),};// Buat instance controller dengan mock serviceconst authController = createAuthController(mockAuthService);// --- Data Dummy ---const DUMMY_USER_ID = "user-abc";const DUMMY_EMAIL = "user@example.com";const DUMMY_PASSWORD = "password123";const DUMMY_NEW_USER = {    id: DUMMY_USER_ID,    name: "John Doe",    email: DUMMY_EMAIL,};const DUMMY_SESSION = {    access_token: "mock-access-token",    refresh_token: "mock-refresh-token",    expires_in: 3600, // 1 jam};const DUMMY_LOGIN_RESULT = {    session: DUMMY_SESSION,    user: DUMMY_NEW_USER,};// --- START: Grouping Test untuk authController ---describe("AuthController", () => {    beforeEach(() => {        jest.clearAllMocks();        process.env.NODE_ENV = "test"; // default    });    // --------------------------------------------------------------------------    // 1. Uji register    // --------------------------------------------------------------------------    describe("register", () => {        it("seharusnya memanggil authService.registerUser dan mengembalikan status 201", async () => {            mockAuthService.registerUser.mockResolvedValue(DUMMY_NEW_USER);            const req = mockRequest({                body: {                    email: DUMMY_EMAIL,                    password: DUMMY_PASSWORD,                    name: "John Doe",                    phoneNumber: "08123",                    address: "Jalan ABC",                },            });            const res = mockResponse();            await authController.register(req, res, mockNext);            expect(mockAuthService.registerUser).toHaveBeenCalledTimes(1);            expect(mockAuthService.registerUser).toHaveBeenCalledWith(                DUMMY_EMAIL,                DUMMY_PASSWORD,                { name: "John Doe", phoneNumber: "08123", address: "Jalan ABC" }            );            expect(res.status).toHaveBeenCalledWith(201);            expect(res.json).toHaveBeenCalledWith({                success: true,                message: expect.any(String),                data: {                    id: DUMMY_NEW_USER.id,                    name: DUMMY_NEW_USER.name,                    email: DUMMY_NEW_USER.email,                },            });            expect(mockNext).not.toHaveBeenCalled();        });    });    // --------------------------------------------------------------------------    // 2. Uji login    // --------------------------------------------------------------------------    describe("login", () => {        it("seharusnya memanggil authService.loginUser, mengatur 2 cookies, dan mengembalikan status 200", async () => {            mockAuthService.loginUser.mockResolvedValue(DUMMY_LOGIN_RESULT);            const req = mockRequest({                body: { email: DUMMY_EMAIL, password: DUMMY_PASSWORD },            });            const res = mockResponse();            await authController.login(req, res, mockNext);            expect(mockAuthService.loginUser).toHaveBeenCalledTimes(1);            expect(mockAuthService.loginUser).toHaveBeenCalledWith(                DUMMY_EMAIL,                DUMMY_PASSWORD            );            expect(res.setHeader).toHaveBeenCalledTimes(1);            expect(mockSerialize).toHaveBeenCalledTimes(2);            // Cek cookie access token            const accessCall = mockSerialize.mock.calls[0];            expect(accessCall[0]).toBe("sb-access-token");            expect(accessCall[1]).toBe(DUMMY_SESSION.access_token);            expect(accessCall[2].maxAge).toBe(DUMMY_SESSION.expires_in);            // Cek cookie refresh token            const refreshCall = mockSerialize.mock.calls[1];            expect(refreshCall[0]).toBe("sb-refresh-token");            expect(refreshCall[1]).toBe(DUMMY_SESSION.refresh_token);            expect(refreshCall[2].maxAge).toBe(60 * 60 * 24 * 7);            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                success: true,                message: "Login berhasil",                data: { user: DUMMY_NEW_USER },            });        });        it("seharusnya mengatur cookie sebagai 'secure: false' di lingkungan non-production", async () => {            process.env.NODE_ENV = "development";            mockAuthService.loginUser.mockResolvedValue(DUMMY_LOGIN_RESULT);            const req = mockRequest({                body: { email: DUMMY_EMAIL, password: DUMMY_PASSWORD },            });            const res = mockResponse();            await authController.login(req, res, mockNext);            expect(mockSerialize).toHaveBeenCalledTimes(2);            expect(mockSerialize.mock.calls[0][2].secure).toBe(false);        });    });    // --------------------------------------------------------------------------    // 3. Uji logout    // --------------------------------------------------------------------------    describe("logout", () => {        it("seharusnya memanggil authService.logoutUser dan membersihkan 2 cookies", async () => {            mockAuthService.logoutUser.mockResolvedValue(true);            const req = mockRequest({});            const res = mockResponse();            await authController.logout(req, res, mockNext);            expect(mockAuthService.logoutUser).toHaveBeenCalledTimes(1);            expect(res.setHeader).toHaveBeenCalledTimes(1);            const setCookieArgs = res.setHeader.mock.calls[0][1];            expect(setCookieArgs).toHaveLength(2);            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                success: true,                message: "Anda telah berhasil Logout.",            });        });    });    // --------------------------------------------------------------------------    // 4. Uji forgotPassword    // --------------------------------------------------------------------------    describe("forgotPassword", () => {        it("seharusnya memanggil authService.forgotPassword dan mengembalikan status 200", async () => {            mockAuthService.forgotPassword.mockResolvedValue(true);            const req = mockRequest({ body: { email: DUMMY_EMAIL } });            const res = mockResponse();            await authController.forgotPassword(req, res, mockNext);            expect(mockAuthService.forgotPassword).toHaveBeenCalledTimes(1);            expect(mockAuthService.forgotPassword).toHaveBeenCalledWith(DUMMY_EMAIL);            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                success: true,                message: expect.any(String),            });        });    });    // --------------------------------------------------------------------------    // 5. Uji resetPassword    // --------------------------------------------------------------------------    describe("resetPassword", () => {        it("seharusnya memanggil authService.resetPassword dan mengembalikan status 200 dengan pesan", async () => {            const DUMMY_ACCESS = "mock-a";            const DUMMY_REFRESH = "mock-r";            const DUMMY_NEW_PASS = "NewPass!123";            const DUMMY_RESULT = { message: "Password berhasil direset." };            mockAuthService.resetPassword.mockResolvedValue(DUMMY_RESULT);            const req = mockRequest({                body: {                    accessToken: DUMMY_ACCESS,                    refreshToken: DUMMY_REFRESH,                    newPassword: DUMMY_NEW_PASS,                },            });            const res = mockResponse();            await authController.resetPassword(req, res, mockNext);            expect(mockAuthService.resetPassword).toHaveBeenCalledTimes(1);            expect(mockAuthService.resetPassword).toHaveBeenCalledWith(                DUMMY_ACCESS,                DUMMY_REFRESH,                DUMMY_NEW_PASS            );            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                success: true,                message: DUMMY_RESULT.message,            });        });    });});