import { createUserController } from "../../src/controllers/userController.js";// Anggap asyncHandler ada di path ini, atau atur mock untuknya jika tidak.// Dalam konteks testing controller, kita akan menguji fungsi aslinya, bukan asyncHandler-nya.// Mocking objek Express Request (req) dan Response (res)const mockRequest = (options) => ({    user: { id: "user-123" }, // Default req.user    body: {},    params: {},    file: undefined,    ...options,});const mockResponse = () => {    const res = {};    res.status = jest.fn().mockReturnThis(); // Memungkinkan chaining res.status(200).json(...)    res.json = jest.fn().mockReturnThis();    return res;};const mockNext = jest.fn();// Data Dummyconst DUMMY_USER_ID = "user-123";const DUMMY_USER_DATA = { id: DUMMY_USER_ID, email: "test@example.com", username: "testuser" };const DUMMY_PICTURES = [{ id: "pic-1", url: "url1" }];// --- Mock UserService ---// Kita akan membuat mock untuk semua fungsi userService yang digunakan controllerconst mockUserService = {    getMyProfile: jest.fn(),    updateUserProfileWithNewPicture: jest.fn(),    updateUserProfileWithOldPicture: jest.fn(),    updateUserProfile: jest.fn(),    getUserProfilePictures: jest.fn(),    deleteUserProfilePicture: jest.fn(),};// Buat instance controller dengan mock serviceconst userController = createUserController(mockUserService);// --- START: Grouping Test untuk userController ---describe("UserController", () => {    // Reset semua mock sebelum setiap test untuk memastikan kebersihan    beforeEach(() => {        jest.clearAllMocks();    });    // --------------------------------------------------------------------------    // 1. Uji getMyProfile    // --------------------------------------------------------------------------    describe("getMyProfile", () => {        it("seharusnya memanggil userService.getMyProfile dengan userId yang benar dan mengembalikan status 200", async () => {            // ARRANGEMENT: Tentukan hasil kembalian mock service            mockUserService.getMyProfile.mockResolvedValue(DUMMY_USER_DATA);            // ARRANGEMENT: Siapkan objek req dan res            const req = mockRequest({ user: { id: DUMMY_USER_ID } });            const res = mockResponse();            // ACT: Panggil controller function            await userController.getMyProfile(req, res, mockNext);            // ASSERTION: Verifikasi bahwa userService dipanggil dengan benar            expect(mockUserService.getMyProfile).toHaveBeenCalledTimes(1);            expect(mockUserService.getMyProfile).toHaveBeenCalledWith(DUMMY_USER_ID);            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                data: DUMMY_USER_DATA,            });            expect(mockNext).not.toHaveBeenCalled(); // Middleware berikutnya tidak boleh dipanggil jika sukses        });    });    // --------------------------------------------------------------------------    // 2. Uji updateMyProfile    // --------------------------------------------------------------------------    describe("updateMyProfile", () => {        // Test Case 2.1: Tidak ada data update sama sekali        it("seharusnya mengembalikan status 200 dengan pesan 'Tidak ada data yang diubah' jika tidak ada update data", async () => {            // ARRANGEMENT: Tentukan hasil kembalian userService (untuk currentUser)            mockUserService.getMyProfile.mockResolvedValue(DUMMY_USER_DATA);            // ARRANGEMENT: Siapkan objek req (req.body kosong, req.file undefined)            const req = mockRequest({ user: { id: DUMMY_USER_ID }, body: {} });            const res = mockResponse();            // ACT: Panggil controller function            await userController.updateMyProfile(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service            expect(mockUserService.getMyProfile).toHaveBeenCalledWith(DUMMY_USER_ID);            expect(mockUserService.updateUserProfile).not.toHaveBeenCalled();            expect(mockUserService.updateUserProfileWithNewPicture).not.toHaveBeenCalled();            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Tidak ada data yang diubah.",                data: DUMMY_USER_DATA,            });        });        // Test Case 2.2: Update dengan file baru (foto profil baru)        it("seharusnya memanggil updateUserProfileWithNewPicture jika req.file tersedia", async () => {            // ARRANGEMENT: Data update dan file dummy            const updateData = { username: "new_user" };            const DUMMY_FILE = { filename: "profile.jpg" };            const UPDATED_USER = { ...DUMMY_USER_DATA, username: "new_user", picture: DUMMY_FILE };            // Tentukan hasil kembalian mock service            mockUserService.updateUserProfileWithNewPicture.mockResolvedValue(UPDATED_USER);            // Siapkan objek req            const req = mockRequest({                user: { id: DUMMY_USER_ID },                body: updateData,                file: DUMMY_FILE,            });            const res = mockResponse();            // ACT: Panggil controller function            await userController.updateMyProfile(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service yang tepat            expect(mockUserService.updateUserProfileWithNewPicture).toHaveBeenCalledTimes(1);            expect(mockUserService.updateUserProfileWithNewPicture).toHaveBeenCalledWith(                DUMMY_USER_ID,                updateData, // Cek apakah updateData dipass dengan benar                DUMMY_FILE // Cek apakah file dipass dengan benar            );            expect(mockUserService.updateUserProfile).not.toHaveBeenCalled();            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Profil berhasil diperbarui",                data: UPDATED_USER,            });        });        // Test Case 2.3: Update dengan ID foto lama (menggunakan history)        it("seharusnya memanggil updateUserProfileWithOldPicture jika profilePictureId tersedia", async () => {            // ARRANGEMENT: Data update dan ID foto lama            const updateData = { username: "old_pic_user" };            const PROFILE_PIC_ID = "pic-999";            const UPDATED_USER = { ...DUMMY_USER_DATA, username: "old_pic_user" };            // Tentukan hasil kembalian mock service            mockUserService.updateUserProfileWithOldPicture.mockResolvedValue(UPDATED_USER);            // Siapkan objek req            const req = mockRequest({                user: { id: DUMMY_USER_ID },                body: { profilePictureId: PROFILE_PIC_ID, ...updateData },            });            const res = mockResponse();            // ACT: Panggil controller function            await userController.updateMyProfile(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service yang tepat            expect(mockUserService.updateUserProfileWithOldPicture).toHaveBeenCalledTimes(1);            expect(mockUserService.updateUserProfileWithOldPicture).toHaveBeenCalledWith(                DUMMY_USER_ID,                updateData, // Cek apakah updateData dipass dengan benar (tanpa profilePictureId)                PROFILE_PIC_ID // Cek apakah profilePictureId dipass dengan benar            );            expect(mockUserService.updateUserProfile).not.toHaveBeenCalled();            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Profil berhasil diperbarui",                data: UPDATED_USER,            });        });        // Test Case 2.4: Update data non-foto saja        it("seharusnya memanggil updateUserProfile jika hanya data profil yang diperbarui", async () => {            // ARRANGEMENT: Data update saja            const updateData = { username: "data_only_user" };            const UPDATED_USER = { ...DUMMY_USER_DATA, username: "data_only_user" };            // Tentukan hasil kembalian mock service            mockUserService.updateUserProfile.mockResolvedValue(UPDATED_USER);            // Siapkan objek req            const req = mockRequest({                user: { id: DUMMY_USER_ID },                body: updateData,                file: undefined, // Penting untuk memastikan ini yang dipanggil            });            const res = mockResponse();            // ACT: Panggil controller function            await userController.updateMyProfile(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service yang tepat            expect(mockUserService.updateUserProfile).toHaveBeenCalledTimes(1);            expect(mockUserService.updateUserProfile).toHaveBeenCalledWith(                DUMMY_USER_ID,                updateData            );            expect(mockUserService.updateUserProfileWithNewPicture).not.toHaveBeenCalled();            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Profil berhasil diperbarui",                data: UPDATED_USER,            });        });    });    // --------------------------------------------------------------------------    // 3. Uji getProfilePictures    // --------------------------------------------------------------------------    describe("getProfilePictures", () => {        it("seharusnya memanggil userService.getUserProfilePictures dan mengembalikan daftar foto", async () => {            // ARRANGEMENT: Tentukan hasil kembalian mock service            mockUserService.getUserProfilePictures.mockResolvedValue(DUMMY_PICTURES);            // Siapkan objek req dan res            const req = mockRequest({ user: { id: DUMMY_USER_ID } });            const res = mockResponse();            // ACT: Panggil controller function            await userController.getProfilePictures(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service            expect(mockUserService.getUserProfilePictures).toHaveBeenCalledTimes(1);            expect(mockUserService.getUserProfilePictures).toHaveBeenCalledWith(DUMMY_USER_ID);            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Daftar foto profil berhasil diambil",                data: DUMMY_PICTURES,            });        });    });    // --------------------------------------------------------------------------    // 4. Uji deleteProfilePicture    // --------------------------------------------------------------------------    describe("deleteProfilePicture", () => {        it("seharusnya memanggil userService.deleteUserProfilePicture dengan userId dan pictureId yang benar", async () => {            // ARRANGEMENT: Data ID dan hasil yang diperbarui            const PICTURE_TO_DELETE = "pic-delete-456";            const UPDATED_USER_AFTER_DELETE = { ...DUMMY_USER_DATA, profilePictures: [] };            // Tentukan hasil kembalian mock service            mockUserService.deleteUserProfilePicture.mockResolvedValue(UPDATED_USER_AFTER_DELETE);            // Siapkan objek req dengan params            const req = mockRequest({                user: { id: DUMMY_USER_ID },                params: { pictureId: PICTURE_TO_DELETE },            });            const res = mockResponse();            // ACT: Panggil controller function            await userController.deleteProfilePicture(req, res, mockNext);            // ASSERTION: Verifikasi pemanggilan service            expect(mockUserService.deleteUserProfilePicture).toHaveBeenCalledTimes(1);            expect(mockUserService.deleteUserProfilePicture).toHaveBeenCalledWith(                DUMMY_USER_ID,                PICTURE_TO_DELETE            );            // ASSERTION: Verifikasi respons HTTP            expect(res.status).toHaveBeenCalledWith(200);            expect(res.json).toHaveBeenCalledWith({                status: "success",                message: "Foto profil berhasil dihapus dari history",                data: UPDATED_USER_AFTER_DELETE,            });        });    });});