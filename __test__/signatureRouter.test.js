// __tests__/signatureRoutes.test.jsimport express from 'express';import request from 'supertest';import { createSignatureController } from '../src/controllers/signatureController.js';import signatureRoutes from '../src/routes/signatureRoutes.js';const mockService = {    signDocument: jest.fn(),    verifySignature: jest.fn(),};// Mock authMiddleware supaya selalu nextjest.mock('../src/middleware/authMiddleware.js', () =>    jest.fn((req, res, next) => {        req.user = { userId: 'user123' };        return next();    }));// =======================// Setup app Express khusus untuk test// =======================const app = express();app.use(express.json());app.use('/api/signatures', signatureRoutes(createSignatureController(mockService)));// =======================// Tests// =======================describe('Signature Routes (Integration Test)', () => {    // -----------------------    // POST /sign/:id    // -----------------------    test('POST /sign/:id sukses', async () => {        mockService.signDocument.mockResolvedValue({ status: 'completed' });        const res = await request(app)            .post('/api/signatures/sign/1')            .send({                method: 'canvas',                signatureImage: 'base64image',                placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }],            });        expect(res.status).toBe(200);        expect(res.body.data.status).toBe('completed');        expect(mockService.signDocument).toHaveBeenCalledWith(            '1',            'user123',            expect.any(Object)        );    });    test('POST /sign/:id error 400 jika method atau placements kosong', async () => {        const res = await request(app)            .post('/api/signatures/sign/1')            .send({ method: 'canvas' });        expect(res.status).toBe(400);        expect(res.body.message).toMatch(/Method.*dan data penempatan/);        expect(mockService.signDocument).not.toHaveBeenCalled();    });    test('POST /sign/:id error 500 jika service throw', async () => {        mockService.signDocument.mockRejectedValue(new Error('Service Error'));        const res = await request(app)            .post('/api/signatures/sign/1')            .send({                method: 'canvas',                signatureImage: 'base64image',                placements: [{ page: 1, x: 10, y: 10, width: 50, height: 50 }],            });        expect(res.status).toBe(500);        expect(res.body.error).toBe('Service Error');    });    test('POST /sign/:id dengan multiple placements', async () => {        mockService.signDocument.mockResolvedValue({ status: 'completed' });        const res = await request(app)            .post('/api/signatures/sign/1')            .send({                method: 'canvas',                signatureImage: 'base64image',                placements: [                    { page: 1, x: 10, y: 10, width: 50, height: 50 },                    { page: 1, x: 60, y: 60, width: 50, height: 50 },                ],            });        expect(res.status).toBe(200);        expect(res.body.data.status).toBe('completed');    });    // -----------------------    // GET /verify    // -----------------------    test('GET /verify sukses', async () => {        mockService.verifySignature.mockResolvedValue({            valid: true,            data: { signerName: 'Indra' },        });        const res = await request(app)            .get('/api/signatures/verify')            .query({ docId: '1', userId: 'user123' });        expect(res.status).toBe(200);        expect(res.body.valid).toBe(true);        expect(res.body.data.signerName).toBe('Indra');        expect(mockService.verifySignature).toHaveBeenCalledWith('1', 'user123');    });    test('GET /verify error 400 jika docId atau userId kosong', async () => {        const res = await request(app).get('/api/signatures/verify'); // tanpa query        expect(res.status).toBe(400);        expect(res.body.message).toMatch(/Parameter docId dan UserId diperlukan/);    });    test('GET /verify error 500 jika service throw', async () => {        mockService.verifySignature.mockRejectedValue(new Error('Service Error'));        const res = await request(app)            .get('/api/signatures/verify')            .query({ docId: '1', userId: 'user123' });        expect(res.status).toBe(500);        expect(res.body.error).toBe('Service Error');    });});