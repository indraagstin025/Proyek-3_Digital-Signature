
generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStatus {
  draft
  pending
  completed
  archived
  @@map("document_status")
}

enum GroupMemberRole {
  admin_group
  signer
  viewer
  @@map("group_member_role")
}

enum SigningMethod {
  canvas
  qrcode
  @@map("signing_method")
}

enum InvitationStatus {
  active
  used
  expired
}


model User {
  id                 String  @id @db.Uuid
  phoneNumber        String? @map("phone_number")
  email              String  @unique
  name               String
  password           String
  title              String?
  company            String?
  address            String?
  isSuperAdmin       Boolean @default(false) @map("is_super_admin")
  profilePictureUrl  String? @map("profile_picture_url")


  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  administeredGroups Group[] @relation("AdminToGroup")
  documents          Document[]
  signaturesPersonal SignaturePersonal[]
  signaturesGroup    SignatureGroup[]
  groupMemberships   GroupMember[]
  profilePictures    UserProfilePicture[]
  @@map("users")
}

model UserProfilePicture {
  id String @id @default(uuid())
  userId String @map("user_id") @db.Uuid
  url String
  hash String @unique
  isActive Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("user_profile_pictures")
}


model Document {
  id             Int            @id @default(autoincrement())
  title          String
  filePath       String         @map("file_path")
  originalHash   String?        @map("original_hash")
  status         DocumentStatus @default(draft)
  originalFilePath String
  signedFilePath   String?
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  owner          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @map("user_id") @db.Uuid // Foreign Key sebagai UUID
  group          Group?         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        Int?           @map("group_id")
  signaturesPersonal SignaturePersonal[]
  signaturesGroup    SignatureGroup[]
  @@map("documents")
}

model SignaturePersonal {
  id             Int           @id @default(autoincrement())
  documentId     Int
  userId         String        @db.Uuid
  method         SigningMethod
  signatureUrl   String?
  qrCodeData     String?
  signedAt       DateTime      @default(now())

  name           String
  email          String
  phone          String?
  address        String?
  profileImage   String?

  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  document       Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("signatures_personal")
}

model SignatureGroup {
  id                 Int           @id @default(autoincrement())
  signatureImagePath String        @map("signature_image_path") @db.Text
  signingMethod      SigningMethod @map("signing_method")
  verificationHash   String?       @map("verification_hash")
  signedAt           DateTime      @map("signed_at")
  ipAddress          String?       @map("ip_address")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  userId             String        @map("user_id") @db.Uuid
  documentId         Int           @map("document_id")

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  document           Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("signatures_group")
}



model Group {
  id            Int               @id @default(autoincrement())
  name          String
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  admin         User              @relation("AdminToGroup", fields: [adminId], references: [id], onDelete: Cascade)
  adminId       String            @map("admin_id") @db.Uuid // Foreign Key sebagai UUID
  members       GroupMember[]
  documents     Document[]
  invitations   GroupInvitation[]
  @@map("groups")
}

model GroupMember {
  id        Int             @id @default(autoincrement())
  role      GroupMemberRole @default(viewer)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int             @map("group_id")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String          @map("user_id") @db.Uuid // Foreign Key sebagai UUID
  @@map("group_members")
}

model GroupInvitation {
  id         Int              @id @default(autoincrement())
  email      String?
  token      String           @unique
  role       GroupMemberRole
  status     InvitationStatus @default(active)
  usageLimit Int?             @map("usage_limit")
  expiresAt  DateTime         @map("expires_at")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  group      Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int              @map("group_id")
  @@map("group_invitations")
}