generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStatus {
  draft
  pending
  completed
  archived
  @@map("document_status")
}

enum GroupMemberRole {
  admin_group
  signer
  viewer
  @@map("group_member_role")
}

enum SigningMethod {
  canvas
  qrcode
  @@map("signing_method")
}

enum InvitationStatus {
  active
  used
  expired
}

enum SignatureStatus {
  PENDING
  SIGNED
  REJECTED
}


model User {
  id                 String              @id @db.Uuid
  phoneNumber        String?             @map("phone_number")
  email              String              @unique
  name               String
  title              String?
  company            String?
  address            String?
  isSuperAdmin       Boolean             @default(false) @map("is_super_admin")
  profilePictureUrl  String?             @map("profile_picture_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  administeredGroups Group[]             @relation("AdminToGroup")
  documents          Document[]
  signaturesPersonal SignaturePersonal[]
  signaturesGroup    SignatureGroup[]    @relation("UserSignaturesGroup") // ✅ Diberi nama
  groupMemberships   GroupMember[]
  profilePictures    UserProfilePicture[]
  @@map("users")
}

model UserProfilePicture {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  url       String
  hash      String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, hash], name: "user_picture_hash_unique")
  @@map("user_profile_pictures")
}


model Document {
  id               String           @id @default(uuid()) @db.Uuid
  title            String
  status           DocumentStatus   @default(draft)
  signedFileUrl    String?          @map("signed_file_url")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  owner            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String           @map("user_id") @db.Uuid
  group            Group?           @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId          Int?             @map("group_id")
  versions         DocumentVersion[]
  currentVersion   DocumentVersion? @relation("CurrentVersion", fields: [currentVersionId], references: [id], onDelete: SetNull)
  currentVersionId String?          @unique @map("current_version_id") @db.Uuid // ✅ Ditambah @db.Uuid
  @@map("documents")
}

model DocumentVersion {
  id                 String              @id @default(uuid()) @db.Uuid // ✅ Ditambah @db.Uuid
  url                String              @db.Text
  hash               String?
  createdAt          DateTime            @default(now()) @map("created_at")
  document           Document            @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId         String              @map("document_id") @db.Uuid
  documentAsCurrent  Document?           @relation("CurrentVersion")
  userId             String              @map("user_id") @db.Uuid
  signaturesPersonal SignaturePersonal[]
  signaturesGroup    SignatureGroup[]
  @@unique([userId, hash], name: "user_document_version_hash_unique")
  @@map("document_versions")
}

model SignaturePersonal {
  id                String          @id @default(uuid()) @db.Uuid // ✅ Ditambah @db.Uuid
  method            SigningMethod
  signatureImageUrl String          @map("signature_image_url")
  qrCodeDataUrl     String?         @map("qr_code_data_url")
  width             Float           @map("width")    @default(0)
  height            Float           @map("height")   @default(0)
  positionX         Float           @map("position_x")
  positionY         Float           @map("position_y")
  pageNumber        Int             @map("page_number")
  signedAt          DateTime        @default(now()) @map("signed_at")
  documentVersionId String          @map("document_version_id") @db.Uuid // ✅ Ditambah @db.Uuid
  documentVersion   DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)
  signerId          String          @map("signer_id") @db.Uuid
  signer            User            @relation(fields: [signerId], references: [id], onDelete: Cascade)
  @@map("signatures_personal")
}

model SignatureGroup {
  id                 Int           @id @default(autoincrement())
  signatureImagePath String        @map("signature_image_path") @db.Text
  signingMethod      SigningMethod @map("signing_method")
  verificationHash   String?       @map("verification_hash")
  signedAt           DateTime      @map("signed_at")
  ipAddress          String?       @map("ip_address")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  userId             String        @map("user_id") @db.Uuid

  user               User            @relation("UserSignaturesGroup", fields: [userId], references: [id], onDelete: Cascade)
  documentVersionId  String        @map("document_version_id") @db.Uuid
  documentVersion    DocumentVersion @relation(fields: [documentVersionId], references: [id], onDelete: Cascade)

  @@map("signatures_group")
}

model Group {
  id            Int               @id @default(autoincrement())
  name          String
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  admin         User              @relation("AdminToGroup", fields: [adminId], references: [id], onDelete: Cascade)
  adminId       String            @map("admin_id") @db.Uuid
  members       GroupMember[]
  documents     Document[]
  invitations   GroupInvitation[]
  @@map("groups")
}

model GroupMember {
  id        Int             @id @default(autoincrement())
  role      GroupMemberRole @default(viewer)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int             @map("group_id")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String          @map("user_id") @db.Uuid
  @@map("group_members")
}

model GroupInvitation {
  id         Int              @id @default(autoincrement())
  email      String?
  token      String           @unique
  role       GroupMemberRole
  status     InvitationStatus @default(active)
  usageLimit Int?             @map("usage_limit")
  expiresAt  DateTime         @map("expires_at")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  group      Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int              @map("group_id")
  @@map("group_invitations")
}
