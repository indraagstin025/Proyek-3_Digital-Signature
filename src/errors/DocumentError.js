import BaseError from "./BaseError.js";class DocumentError extends  BaseError {    /**     *     * @param code     * @param statusCode     * @param message     */    constructor(code, statusCode = 400, message = "DOCUMENT_ERROR") {        super(code, statusCode, message );    }    /**     *     * @param message     * @returns {DocumentError}     * @constructor     */    static NotFound(message = "Dokumen tidak ditemukan.") {        return new DocumentError(message, 404, "DOCUMENT_NOT_FOUND");    }    static VersionNotFound(message = "Versi dokumen tidak ditemukan.") {        return new DocumentError(message, 404, "VERSION_NOT_FOUND");    }    static EncryptedError(message = "Dokumen ini terenksripsi dan tidak dapat diubah.") {        return new DocumentError(message, 403, "DOCUMENT_ENCRYPTED");    }    static SignatureError(message = "Tidak ada tanda tangan untuk ditempelkan.") {        return new DocumentError(message, 400, "SIGNATURE_MISSING");    }    static DuplicateDocument(message = "Dokumen dengan konten yang sama sudah ada.") {        return new DocumentError(message, 409, "DUPLICATED_DOCUMENT");    }    static StorageError(message = "Gagal menyimpan dokumen ke dalam storage.") {        return new DocumentError(message, 500, "STORAGE_ERROR");    }    static UpdatedError(message = "Gagal memperbaharui dokumen.") {        return new DocumentError(message, 400, "DOCUMENT_UPDATE_ERROR");    }    static DeleteVersionError(message = "Tidak dapat menghapus versi dokumen ini.") {        return new DocumentError(message, 400, "DELETE_VERSION_ERROR");    }    static DeleteError(message = "Gagal menghapus dokumen.") {        return new DocumentError(message, 500, "DOCUMENT_DELETE_ERROR");    }}export default DocumentError;