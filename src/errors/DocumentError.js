import BaseError from "./BaseError.js";class DocumentError extends BaseError {    /**     *     * @param code     * @param statusCode     * @param message     */    constructor(code, statusCode = 400, message = "DOCUMENT_ERROR") {        super(code, statusCode, message);    }    /**     *     * @param message     * @returns {DocumentError}     */    static NotFound(message = "Dokumen tidak ditemukan.") {        return new DocumentError("DOCUMENT_NOT_FOUND", 404, message);    }    static VersionNotFound(message = "Versi dokumen tidak ditemukan.") {        return new DocumentError("VERSION_NOT_FOUND", 404, message);    }    static EncryptedError(message = "Dokumen ini terenkripsi dan tidak dapat diubah.") {        return new DocumentError("DOCUMENT_ENCRYPTED", 403, message);    }    static SignatureError(message = "Tidak ada tanda tangan untuk ditempelkan.") {        return new DocumentError("SIGNATURE_MISSING", 400, message);    }    static DuplicateDocument(message = "Dokumen dengan konten yang sama sudah ada.") {        return new DocumentError("DUPLICATED_DOCUMENT", 409, message);    }    static StorageError(message = "Gagal menyimpan dokumen ke dalam storage.") {        return new DocumentError("STORAGE_ERROR", 500, message);    }    static UpdatedError(message = "Gagal memperbaharui dokumen.") {        return new DocumentError("DOCUMENT_UPDATE_ERROR", 400, message);    }    static DeleteVersionError(message = "Tidak dapat menghapus versi dokumen ini.") {        return new DocumentError("DELETE_VERSION_ERROR", 400, message);    }    static DeleteError(message = "Gagal menghapus dokumen.") {        return new DocumentError("DOCUMENT_DELETE_ERROR", 500, message);    }}export default DocumentError;