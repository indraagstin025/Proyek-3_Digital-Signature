import BaseError from "./BaseError.js";class AuthError extends BaseError {    /**     * @param {string} code - kode error khusus untuk auth (contoh: EMAIL_ALREADY_EXIST, LOGIN_FAILED).     * @param {number} statusCode - HTTP status code (401, 403, 409, dll).     * @param {string} message - pesan error yang jelas.     */    constructor(code, statusCode = 401, message = "Terjadi kesalahan autentikasi.") {        super(code, statusCode, message);    }    /**     *     * @param message     * @returns {AuthError}     * @constructor     */    static MissingToken(message = "Akses ditolak. Token tidak ditemukan.") {        return new AuthError(message, 401, "MISSING_TOKEN");    }    static InvalidToken(message = "Token otentikasi tidak valid.") {        return new AuthError(message, 401, "INVALID_TOKEN");    }    static TokenExpired(message = "Sesi Anda telah berakhir. Silahkan login kembali.") {        return new AuthError(message, 401, "TOKEN_EXPIRED");    }    /**     *     * @param message     * @returns {AuthError}     * @constructor     */    static UserNotFound(message = "User tidak ditemukan.") {        return new AuthError(message, 404, "USER_NOT_FOUND");    }    static EmailAlreadyExist(message = "Email sudah terdaftar.") {        return new AuthError(message, 409, "EMAIL_ALREADY_EXIST");    }    static InvalidCredentials(message = "Email atau Password salah.") {        return new AuthError(message, 401, "INVALID_CREDENTIALS");    }    /**     *     * @param message     * @returns {AuthError}     * @constructor     */    static ResetPasswordExpired(message = "Token reset password kadaluarsa.") {        return new AuthError(message, 400, "RESET_PASSWORD_EXPIRED");    }    static ResetPasswordInvalid(message = "Token reset password tidak valid.") {        return new AuthError(message, 400, "RESET_PASSWORD_INVALID");    }    static SupabaseError(message = "Terjadi kesalahan pada Supabase Auth.") {        return new AuthError(message, 502, "SUPABASE_ERROR");    }    static DatabaseError(message = "Terjadi kesalahan pada database.") {        return new AuthError(message, 500, "DATABASE_ERROR");    }    static NetworkError(message = "Koneksi ke server lambat atau tidak stabil.") {        return new AuthError(message, 503, "NETWORK_ERROR");    }}