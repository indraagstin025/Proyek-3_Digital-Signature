import BaseError from "./BaseError.js";class AuthError extends BaseError {    /**     * @param {string} code - kode error khusus untuk auth (contoh: EMAIL_ALREADY_EXIST, LOGIN_FAILED).     * @param {number} statusCode - HTTP status code (401, 403, 409, dll).     * @param {string} message - pesan error yang jelas.     */    constructor(code, statusCode = 401, message = "Terjadi kesalahan autentikasi.") {        super(code, statusCode, message);    }    /**     *     * @param message     * @returns {AuthError}     */    static MissingToken(message = "Akses ditolak. Token tidak ditemukan.") {        return new AuthError("MISSING_TOKEN", 401, message);    }    static InvalidToken(message = "Token otentikasi tidak valid.") {        return new AuthError("INVALID_TOKEN", 401, message);    }    static TokenExpired(message = "Sesi Anda telah berakhir. Silahkan login kembali.") {        return new AuthError("TOKEN_EXPIRED", 401, message);    }    /**     *     * @param message     * @returns {AuthError}     */    static UserNotFound(message = "User tidak ditemukan.") {        return new AuthError("USER_NOT_FOUND", 404, message);    }    static EmailAlreadyExist(message = "Email sudah terdaftar.") {        return new AuthError("EMAIL_ALREADY_EXIST", 409, message);    }    static InvalidCredentials(message = "Email atau Password salah.") {        return new AuthError("INVALID_CREDENTIALS", 401, message);    }    static PasswordTooWeak(message = "Password tidak memenuhi syarat.") {        return new AuthError("PASSWORD_TOO_WEAK", 400, message);    }    /**     *     * @param message     * @returns {AuthError}     */    static ResetPasswordExpired(message = "Token reset password kadaluarsa.") {        return new AuthError("RESET_PASSWORD_EXPIRED", 400, message);    }    static ResetPasswordInvalid(message = "Token reset password tidak valid.") {        return new AuthError("RESET_PASSWORD_INVALID", 400, message);    }    static SupabaseError(message = "Terjadi kesalahan pada Supabase Auth.") {        return new AuthError("SUPABASE_ERROR", 502, message);    }    static DatabaseError(message = "Terjadi kesalahan pada database.") {        return new AuthError("DATABASE_ERROR", 500, message);    }    static NetworkError(message = "Koneksi ke server lambat atau tidak stabil.") {        return new AuthError("NETWORK_ERROR", 503, message);    }}export default AuthError;