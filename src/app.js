import express from 'express';import 'dotenv/config';import cors from 'cors';import morgan from 'morgan';import logger from './utils/logger.js';import { AuthService } from './services/authService.js';import { UserService } from './services/userService.js';import { DocumentService } from './services/documentService.js';import { SignatureService } from "./services/signatureService.js";import PrismaUserRepository from "./repository/prisma/PrismaUserRepository.js";import PrismaSignatureRepository from "./repository/prisma/PrismaSignatureRepository.js";import SupabaseAuthRepository from './repository/supabase/SupabaseAuthRepository.js';import SupabaseDocumentRepository from './repository/supabase/SupabaseDocumentRepository.js';import SupabaseFileStorage from "./repository/supabase/SupabaseFileStorage.js";import SupabaseClient from "@supabase/supabase-js";import { createAuthController } from './controllers/authController.js';import { createUserController } from './controllers/userController.js';import { createAdminController } from './controllers/adminController.js';import { createDocumentController } from './controllers/documentController.js';import { createSignatureController } from "./controllers/signatureController.js";import createAuthRoutes from './routes/authRoutes.js';import createUserRoutes from './routes/userRoutes.js';import createDocumentRoutes from './routes/documentRoutes.js';import createSignatureRoutes from './routes/signatureRoutes.js';const app = express();const stream = {    write: (message) => logger.http(message.trim()),};const morganMiddleware = morgan(    // Format log: :method :url :status :res[content-length] - :response-time ms    ":method :url :status :res[content-length] - :response-time ms",    { stream });app.use(morganMiddleware);app.use(express.json());app.use(cors({    origin: 'http://localhost:5173'}));app.get('/', (req, res) => {    res.json({        message: '✅ API sudah berjalan',        status: 'success',        timestamp: new Date().toISOString()    });});// 1. Inisialisasi Repositoriconst authRepository = new SupabaseAuthRepository();const documentRepository = new SupabaseDocumentRepository();const fileStorage = new SupabaseFileStorage(SupabaseClient);const userRepository = new PrismaUserRepository();const signatureRepository = new PrismaSignatureRepository();// 2. Inisialisasi Layananconst authService = new AuthService(authRepository);const userService = new UserService(userRepository, fileStorage);const documentService = new DocumentService(documentRepository);const signatureService = new SignatureService(signatureRepository, fileStorage);// 3. Inisialisasi Pengontrolconst authController = createAuthController(authService);const userController = createUserController(userService);const adminController = createAdminController(userService);const documentController = createDocumentController(documentService);const signatureController = createSignatureController(signatureService);// 4. Inisialisasi Ruteapp.use('/api/auth', createAuthRoutes(authController));app.use('/api/users', createUserRoutes(userController, adminController));app.use('/api/documents', createDocumentRoutes(documentController));app.use('/api/signatures', createSignatureRoutes(signatureController));const port = process.env.PORT || 3000;app.listen(port, () => {    console.log(`✅ Server berjalan di http://localhost:${port}`);});