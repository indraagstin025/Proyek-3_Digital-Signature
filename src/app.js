import express from 'express';import 'dotenv/config';import cors from 'cors';import { AuthService } from './services/authService.js';import { UserService } from './services/userService.js';import { DocumentService } from './services/documentService.js';import SupabaseAuthRepository from './repository/SupabaseAuthRepository.js';import PrismaUserRepository from './repository/PrismaUserRepository.js';import SupabaseDocumentRepository from './repository/SupabaseDocumentRepository.js';import { createAuthController } from './controllers/authController.js';import { createUserController } from './controllers/userController.js';import { createAdminController } from './controllers/adminController.js';import { createDocumentController } from './controllers/documentController.js';import createAuthRoutes from './routes/authRoutes.js';import createUserRoutes from './routes/userRoutes.js';import createDocumentRoutes from './routes/documentRoutes.js';const app = express();app.use(express.json());app.use(cors({    origin: 'http://localhost:5173'}));app.get('/', (req, res) => {    res.json({        message: '✅ API sudah berjalan',        status: 'success',        timestamp: new Date().toISOString()    });});// 1. Inisialisasi Repositoriesconst authRepository = new SupabaseAuthRepository();const userRepository = new PrismaUserRepository();const documentRepository = new SupabaseDocumentRepository();// 2. Inisialisasi Services dan injeksi repositoryconst authService = new AuthService(authRepository);const userService = new UserService(userRepository);const documentService = new DocumentService(documentRepository);// 3. Inisialisasi Controllers dan injeksi servicesconst authController = createAuthController(authService);const userController = createUserController(userService);const adminController = createAdminController(userService);const documentController = createDocumentController(documentService);// 4. Inisialisasi Routes dan injeksi controllersapp.use('/api/auth', createAuthRoutes(authController));app.use('/api/users', createUserRoutes(userController, adminController));app.use('/api/documents', createDocumentRoutes(documentController));const port = process.env.PORT || 3000;app.listen(port, () => {    console.log(`✅ Server berjalan di http://localhost:${port}`);});