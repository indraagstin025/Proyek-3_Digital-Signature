import express from 'express';import 'dotenv/config';import cors from 'cors';import { AuthService } from './services/authService.js';import { UserService } from './services/userService.js';import SupabaseAuthRepository from "./repository/SupabaseAuthRepository.js";import PrismaUserRepository from './repository/PrismaUserRepository.js';import { createAuthController } from './controllers/authController.js';import { createUserController } from './controllers/userController.js';import { createAdminController } from './controllers/adminController.js';import createAuthRoutes from './routes/authRoutes.js';import createUserRoutes from './routes/userRoutes.js';import documentRoutes from "./routes/documentRoutes.js";const app = express();app.use(express.json());app.use(cors({    origin: 'http://localhost:5173'}));app.get('/', (req, res) => {    res.json({        message: '✅ API sudah berjalan',        status: 'success',        timestamp: new Date().toISOString()    });});// 1. Inisialisasi Repositoriesconst authRepository = new SupabaseAuthRepository();const userRepository = new PrismaUserRepository();// 2. Inisialisasi Servicesconst authService = new AuthService(authRepository);const userService = new UserService(userRepository);// 3. Inisialisasi Controllersconst authController = createAuthController(authService);const userController = createUserController(userService);const adminController = createAdminController(userService);// 4. Inisialisasi Routes dan injeksi controllersapp.use('/api/auth', createAuthRoutes(authController));app.use('/api/users', createUserRoutes(userController, adminController));app.use('/api/documents', documentRoutes); // Gunakan rute yang belum direfaktorconst port = process.env.PORT || 3000;app.listen(port, () => {    console.log(`✅ Server berjalan di http://localhost:${port}`);});