import { PrismaClient } from '@prisma/client';import { PDFDocument } from "pdf-lib";import QRCode from 'qrcode';import { supabase, supabaseBucket } from "../config/supabaseClient.js";const prisma = new PrismaClient();/** * Fungsi untuk menandatangani dokumen. * @param {number|string} documentId - ID dokumen * @param {string} userId - ID user * @param {object} options - Opsi tanda tangan { method: 'canvas'|'qrcode', signatureImage?, placements: [] } */export const signDocument = async (documentId, userId, options) => {    const { method, signatureImage, placements } = options;    if (!placements || placements.length === 0) {        throw new Error('Informasi penempatan (placements) diperlukan.');    }    const document = await prisma.document.findUnique({ where: { id: parseInt(documentId) } });    if (!document) throw new Error('Dokumen tidak ditemukan.');    const { data: fileBlob, error: downloadError } = await supabase.storage        .from(supabaseBucket)        .download(document.filePath);    if (downloadError) throw new Error(downloadError.message);    const pdfBuffer = await fileBlob.arrayBuffer();    const pdfDoc = await PDFDocument.load(pdfBuffer);    let embeddedImage;    let verificationData = null;    if (method === 'canvas') {        if (!signatureImage) throw new Error('Gambar tanda tangan diperlukan untuk metode canvas.');        const pngBytes = Buffer.from(signatureImage.replace(/^data:image\/png;base64,/, ''), 'base64');        embeddedImage = await pdfDoc.embedPng(pngBytes);    } else if (method === 'qrcode') {        verificationData = `docId=${document.id}&userId=${userId}`;        const verificationUrl = `https://yoursite.com/verify?${verificationData}`;        const qrImageData = await QRCode.toDataURL(verificationUrl);        const qrImageBytes = Buffer.from(qrImageData.replace(/^data:image\/png;base64,/, ''), 'base64');        embeddedImage = await pdfDoc.embedPng(qrImageBytes);    } else {        throw new Error('Metode tidak valid.');    }    for (const p of placements) {        const { page, x, y, width, height } = p;        const pdfPage = pdfDoc.getPage(page - 1);        const y_pdf = pdfPage.getSize().height - y - height;        pdfPage.drawImage(embeddedImage, { x, y: y_pdf, width, height });    }    const signedPdfBytes = await pdfDoc.save();    const signedFilePath = `${userId}/signed/${document.title.replace(/\.pdf$/, '')}-signed-${Date.now()}.pdf`;    const { error: uploadError } = await supabase.storage        .from(supabaseBucket)        .upload(signedFilePath, signedPdfBytes, { contentType: 'application/pdf', upsert: true });    if (uploadError) throw new Error(uploadError.message);    const updatedDocument = await prisma.document.update({        where: { id: document.id },        data: { status: 'completed', filePath: signedFilePath },    });    return updatedDocument;};/** * Verifikasi tanda tangan berbasis QR Code */export async function verifySignature(documentId, userId) {    const signature = await prisma.signaturePersonal.findFirst({        where: { documentId: parseInt(documentId), userId, method: "qrcode" },        include: {            user: { select: { name: true, email: true } },            document: { select: { title: true } },        },    });    if (!signature) {        return { valid: false, message: "Tanda tangan tidak ditemukan atau tidak valid." };    }    return {        valid: true,        message: "Tanda tangan terverifikasi.",        data: {            documentTitle: signature.document.title,            signerName: signature.user.name,            signerEmail: signature.user.email,            signedAt: signature.signedAt,        },    };}