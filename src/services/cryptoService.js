// CryptoService.jsimport crypto from "crypto";import CommonError from "../errors/CommonError.js";/** * @description Service untuk menangani semua operasi kriptografi, termasuk * pembuatan kunci, penandatanganan (signing), dan verifikasi tanda tangan digital. * Kita menggunakan algoritma RSA dengan SHA-256. */export class CryptoService {    /**     * @description Membuat pasangan Kunci Publik (Public Key) dan Kunci Privat (Private Key) RSA.     * Kunci Privat digunakan untuk MENANDATANGANI. Kunci Publik digunakan untuk VERIFIKASI.     * * @returns {object} Objek yang berisi kunci publik dan kunci privat dalam format PEM (string).     */    generateKeyPair() {        try {            const { publicKey, privateKey } = crypto.generateKeyPairSync('rsa', {                modulusLength: 2048, // Ukuran kunci standar dan aman                publicKeyEncoding: {                    type: 'spki',                    format: 'pem'                },                privateKeyEncoding: {                    type: 'pkcs8',                    format: 'pem'                }            });            // ⚠️ Peringatan Penting: Kunci Privat (privateKey) harus disimpan sangat aman            // dan HANYA dapat diakses oleh sistem penandatanganan!            return { publicKey, privateKey };        } catch (error) {            throw CommonError.InternalServerError(`Gagal membuat pasangan kunci: ${error.message}`);        }    }    /**     * @description Membuat Tanda Tangan Digital dari data (buffer file) menggunakan Kunci Privat.     * Proses: SHA256(data) -> Enkripsi dengan Kunci Privat.     * * @param {Buffer} dataBuffer Buffer dari data yang akan ditandatangani (misalnya seluruh byte PDF).     * @param {string} privateKey Kunci Privat penanda tangan dalam format PEM.     * @returns {string} Tanda tangan digital (signature) dalam format Base64.     */    signData(dataBuffer, privateKey) {        try {            const signer = crypto.createSign('RSA-SHA256'); // Algoritma penandatanganan: RSA dengan SHA256            signer.update(dataBuffer);            // Proses penandatanganan menggunakan kunci privat            const signature = signer.sign(privateKey, 'base64');            return signature;        } catch (error) {            throw CommonError.InternalServerError(`Gagal membuat tanda tangan digital: ${error.message}`);        }    }    /**     * @description Memverifikasi Tanda Tangan Digital menggunakan Kunci Publik.     * Proses: Dekripsi Tanda Tangan dengan Kunci Publik -> Bandingkan dengan SHA256(data) yang baru.     * * @param {Buffer} dataBuffer Data asli yang ditandatangani (buffer file PDF saat ini).     * @param {string} signature Tanda tangan digital yang tersimpan (format Base64).     * @param {string} publicKey Kunci Publik penanda tangan yang tersimpan (format PEM).     * @returns {boolean} `true` jika tanda tangan valid (dokumen otentik dan tidak diubah), `false` jika tidak.     */    verifySignature(dataBuffer, signature, publicKey) {        try {            const verifier = crypto.createVerify('RSA-SHA256');            verifier.update(dataBuffer);            // Proses verifikasi menggunakan kunci publik            return verifier.verify(publicKey, signature, 'base64');        } catch (error) {            // Jika kunci publik tidak valid atau format tanda tangan rusak, ini akan menghasilkan error.            console.error("Kesalahan saat verifikasi kriptografi:", error.message);            return false;        }    }    /**     * @description Menghitung hash SHA-256 dari sebuah buffer file. Digunakan untuk     * menjamin integritas data dan melengkapi proses verifikasi.     * * @param {Buffer} fileBuffer Buffer dari file (misalnya PDF).     * @returns {string} Hash SHA-256 dalam format hex.     */    calculateHash(fileBuffer) {        return crypto.createHash("sha256").update(fileBuffer).digest("hex");    }}