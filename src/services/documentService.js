import {supabase, supabaseBucket} from '../config/supabaseClient.js';import {PrismaClient} from '@prisma/client';const prisma = new PrismaClient();/** * Upload Dokumen baru ke Supabase Storage dan simpan relative path ke database. */export async function createDocument(userId, file, title) {    if (!file) throw new Error("File dokumen harus diunggah.");    if (!title || title.trim() === "") throw new Error("Judul dokumen harus ada dan tidak boleh kosong.");    try {        const newDoc = await prisma.document.create({            data: {                title,                filePath: "",                originalFilePath: "",                userId,                status: "draft",            },        });        const filePathInStorage = `${userId}/${newDoc.id}-${file.originalname}`;        const { error: uploadError } = await supabase.storage            .from(supabaseBucket)            .upload(filePathInStorage, file.buffer, {                contentType: file.mimetype,                upsert: true,            });        if (uploadError) {            throw new Error(`Gagal mengunggah dokumen ke penyimpanan: ${uploadError.message}`);        }        const updatedDoc = await prisma.document.update({            where: { id: newDoc.id },            data: {                filePath: filePathInStorage,                originalFilePath: filePathInStorage,            },        });        // Ambil public URL dari Supabase        const { data: publicUrlData } = supabase.storage            .from(supabaseBucket)            .getPublicUrl(filePathInStorage);        return {            ...updatedDoc,            publicUrl: publicUrlData.publicUrl,        };    } catch (err) {        console.error("Error createDocument:", err);        throw err;    }}/** * Helper untuk ambil public URL dari path storage. */function getPublicUrl(filePath) {    if (!filePath) return null;    const {data} = supabase.storage        .from(supabaseBucket)        .getPublicUrl(filePath);    return data?.publicUrl || null;}/** * Mengambil semua dokumen milik user tertentu. */export async function getAllDocuments(userId) {    if (!userId) throw new Error("ID user tidak ditemukan");    const documents = await prisma.document.findMany({        where: {userId}, orderBy: {createdAt: "desc"},    });    return documents.map((doc) => ({        ...doc, publicUrl: getPublicUrl(doc.filePath),    }));}/** * Ambil detail satu dokumen berdasarkan ID. */export async function getDocumentById(documentId, userId) {    if (!documentId) throw new Error("ID dokumen wajib diisi");    const id = parseInt(documentId);    if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");    const document = await prisma.document.findFirst({        where: {id, userId},    });    if (!document) {        throw new Error("Dokumen tidak ditemukan atau anda tidak memiliki akses");    }    return {        ...document, publicUrl: getPublicUrl(document.filePath),    };}/** * Update informasi dokumen dan GANTI file lama dengan yang baru (overwrite). */export async function updateDocument(documentId, userId, updates, newFile = null) {    const id = parseInt(documentId);    if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");    const document = await prisma.document.findFirst({        where: {id: id, userId},    });    if (!document) {        throw new Error("Dokumen tidak ditemukan atau anda tidak memiliki akses.");    }    let newFilePath = document.filePath;    if (newFile) {        const newFilePathInStorage = `${userId}/${documentId}-${newFile.originalname}`;        const {error: uploadError} = await supabase.storage            .from(supabaseBucket)            .upload(newFilePathInStorage, newFile.buffer, {                contentType: newFile.mimetype, upsert: true,            });        if (uploadError) {            throw new Error(`Gagal mengunggah file baru: ${uploadError.message}`);        }        newFilePath = newFilePathInStorage;    }    return prisma.document.update({        where: {id}, data: {            title: updates.title || document.title, status: updates.status || document.status, filePath: newFilePath,        },    });}/** * Hapus dokumen dari Supabase Storage dan database. */export async function deleteDocument(documentId, userId) {    const id = parseInt(documentId);    if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");    const document = await prisma.document.findFirst({        where: {id: id, userId},    });    if (!document) {        throw new Error("Dokumen tidak tersedia atau Anda tidak memiliki akses.");    }    console.log("--- DEBUGGING DELETE ---");    console.log("Relative Path dari DB:", document.filePath);    console.log("Nama Bucket dari .env:", supabaseBucket);    console.log("--- AKHIR DEBUGGING ---");    if (document.filePath) {        const {error: removeError} = await supabase.storage            .from(supabaseBucket)            .remove([document.filePath]);        if (removeError) {            console.error("Gagal menghapus file dari storage:", removeError.message);            throw new Error("Gagal menghapus file dari penyimpanan, proses dibatalkan.");        }    }    return await prisma.document.delete({where: {id}});}/** * Upload dokumen yang sudah ditandatangani (hasil generate PDF baru). */export async function uploadSignedDocument(documentId, userId, signedBuffer) {    const id = parseInt(documentId);    if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");    try {        const document = await prisma.document.findFirst({            where: { id, userId },        });        if (!document) {            throw new Error("Dokumen tidak ditemukan atau Anda tidak memiliki akses.");        }        const signedFilePath = `${userId}/${documentId}-signed.pdf`;        const { error: uploadError } = await supabase.storage            .from(supabaseBucket)            .upload(signedFilePath, signedBuffer, {                contentType: "application/pdf",                upsert: true,            });        if (uploadError) {            throw new Error(`Gagal mengunggah dokumen hasil tanda tangan: ${uploadError.message}`);        }        const updatedDoc = await prisma.document.update({            where: { id },            data: {                filePath: signedFilePath,                status: "completed",            },        });        const { data: publicUrlData } = supabase.storage            .from(supabaseBucket)            .getPublicUrl(signedFilePath);        return {            ...updatedDoc,            publicUrl: publicUrlData.publicUrl,        };    } catch (err) {        console.error("Error uploadSignedDocument:", err);        throw err;    }}