import {supabase, supabaseBucket} from '../config/supabaseClient.js';import { PrismaClient } from '@prisma/client';/** * Upload Dokumen baru ke Supabase Storage dan simpan data dokumen ke database. * @param {String} userId - ID user pemilik dokumen. * @param {Object} file - File yang diupload (dari multer). * @param {String} title - Judul Dokumen. * @returns {Promise<Object> Data dokumen yang disimpan di database.} */export async function createDocument(userId, file, title) {    if (!file) {        throw new Error('File dokumen harus di unggah.');    }    if (!title || title.trim() === '') {        throw new Error('Judul dokumen tidak boleh kosong,');    }    const fileName = `${Date.now()}-${file.originalname}`;    const { error: uploadError } = await supabase.storage        .from(supabaseBucket)        .upload(filename, file.buffer, {            contentType:file.mimetype,        });    if (uploadError) {        throw new Error(`Gagal menggunggah dokumen ke penyimpanan: ${uploadError.message}`);    }    const { data: publicUrlData } = supabase.storage        .from(supabaseBucket)        .getPublicUrl(filename);    return prisma.document.create({        data: {            title: title.trim(),            filePath: filename,            status: 'draft',            owner: { connect: {id:userId} },        },    });}/** * mengambil semua dokumen milik user tertentu * @param {String} userId -ID user. * @returns {Promise<Array>} Daftar Dokumen user. */export async function getAllDocuments(userId) {    if (!userId) {        throw new Error('ID user tidak ditemukan');    }    return prisma.document.findMany({        where: { userId },        orderBy: {createdAt: 'desc'},    });}/** * Ambil detail satu dokumen berdasarkan ID. * @param {Number} documentId - ID dokumen. * @param {String} userId - ID user pemilik dokumen. * @returns {Promise<Object>} Detail dokumen. */export async function getDocumentById(documentId, userId) {    if (!documentId) {        throw new Error('ID dokumen wajib di isi');    }    const document = await prisma.document.findFirst({        where: { id: documentId, userId },    });    if (!document) {        throw new Error('Dokumen tidak ditemukan atau anda tidak memiliki Akses');    }    return document;}/** * Update informasi dokumen seperti (judul, status, atau ganti file). * @param {Number} documentId - ID dokumen. * @param {String} userId - ID user. * @param {Object} updates - Data yang akan diperbaharui. * @param {Object|null} file - File baru (jika ingin mengganti file lama). * @returns {Promise<Object>} Dokumen yang sudah diperbaharui. */export async function updateDocument(documentId, userId, updates, file = null) {    const document = await prisma.document.findFirst({        where: { id: documentId, userId },    });    if (!document) {        throw new Error('Dokumen tidak ditemukan atau anda tidak memiliki akses.');    }    let newFilePath = document.filepath;    if (file) {        await supabase.storage.from(supabaseBucket).remove([document.filePath]);        const fileName = `${Date.now()}-${file.originalname}`;        const { error: uploadError } = await supabase.storage            .from(supabaseBucket)            .upload(fileName, file.buffer, {                contentType:file.mimetype            });        if (uploadError) {            throw new Error(`Gagal mengunggah file baru: ${uploadError.message}`);        }        newFilePath = fileName;    }    return prisma.document.update({        where: { id: documentId },        data: {            title: updates.title || document.title,            status: updates.status || document.status,            filePath: newFilePath,        },    });}/** * Hapus dokumen dari Supabase Storage dan database. * @param {Number} documentId - ID dokumen. * @param {String} userId - ID user. * @returns {Promise<void>} */export async function deleteDocument(documentId, userId) {    const document = await prisma.document.findFirst({        where: { id: documentId, userId},    });    if (!document) {        throw new Error('Dokumen tidak tersedia atau Anda tidak memiliki Akses');    }    await supabase.storage.from(supabaseBucket).remove([document.filePath]);    await prisma.document.delete({ where: { id: documentId } });}