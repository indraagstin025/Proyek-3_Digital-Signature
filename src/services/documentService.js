export class DocumentService {    constructor(documentRepository) {        if (!documentRepository) {            throw new Error("documentRepository harus disediakan.");        }        this.documentRepository = documentRepository;    }    async createDocument(userId, file, title) {        if (!file) throw new Error("File dokumen harus diunggah.");        if (!title || title.trim() === "") throw new Error("Judul dokumen harus ada dan tidak boleh kosong.");        try {            const newDoc = await this.documentRepository.create({                title,                filePath: "",                originalFilePath: "",                userId,                status: "draft",            });            // ✅ Tambahkan prefix "document_user/"            const filePathInStorage = `document_user/${userId}/${newDoc.id}-${file.originalname}`;            await this.documentRepository.uploadFile(filePathInStorage, file.buffer, file.mimetype);            const updatedDoc = await this.documentRepository.update(newDoc.id, {                filePath: filePathInStorage,                originalFilePath: filePathInStorage,            });            const publicUrl = await this.documentRepository.getFilePublicUrl(filePathInStorage);            return { ...updatedDoc, publicUrl };        } catch (err) {            console.error("Error createDocument:", err);            throw err;        }    }    async getAllDocuments(userId) {        if (!userId) throw new Error("ID user tidak ditemukan");        const documents = await this.documentRepository.findByUserId(userId);        return documents.map((doc) => ({            ...doc,            publicUrl: this.documentRepository.getFilePublicUrl(doc.filePath),        }));    }    async getDocumentById(documentId, userId) {        const id = parseInt(documentId);        if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");        const document = await this.documentRepository.findById(id, userId);        if (!document) {            throw new Error("Dokumen tidak ditemukan atau anda tidak memiliki akses");        }        return {            ...document,            publicUrl: this.documentRepository.getFilePublicUrl(document.filePath),        };    }    async updateDocument(documentId, userId, updates, newFile = null) {        const id = parseInt(documentId);        if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");        const document = await this.documentRepository.findById(id, userId);        if (!document) {            throw new Error("Dokumen tidak ditemukan atau anda tidak memiliki akses.");        }        let newFilePath = document.filePath;        if (newFile) {            // ✅ Prefix folder ditambahkan            const newFilePathInStorage = `document_user/${userId}/${documentId}-${newFile.originalname}`;            await this.documentRepository.uploadFile(newFilePathInStorage, newFile.buffer, newFile.mimetype);            newFilePath = newFilePathInStorage;        }        return this.documentRepository.update(id, {            title: updates.title || document.title,            status: updates.status || document.status,            filePath: newFilePath,        });    }    async deleteDocument(documentId, userId) {        const id = parseInt(documentId);        if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");        const document = await this.documentRepository.findById(id, userId);        if (!document) {            throw new Error("Dokumen tidak tersedia atau Anda tidak memiliki akses.");        }        if (document.filePath) {            await this.documentRepository.deleteFile(document.filePath);        }        return await this.documentRepository.remove(id);    }    async uploadSignedDocument(documentId, userId, signedBuffer) {        const id = parseInt(documentId);        if (isNaN(id)) throw new Error("ID dokumen harus berupa angka.");        const document = await this.documentRepository.findById(id, userId);        if (!document) {            throw new Error("Dokumen tidak ditemukan atau Anda tidak memiliki akses.");        }        // ✅ Prefix folder ditambahkan        const signedFilePath = `document_user/${userId}/${documentId}-signed.pdf`;        await this.documentRepository.uploadFile(signedFilePath, signedBuffer, "application/pdf");        const updatedDoc = await this.documentRepository.update(id, {            filePath: signedFilePath,            status: "completed",        });        const publicUrl = this.documentRepository.getFilePublicUrl(signedFilePath);        return {            ...updatedDoc,            publicUrl,        };    }}