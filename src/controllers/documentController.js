import * as documentService from '../services/documentService.js';/** * Fungsi untuk membuat dokumen baru * @route POST /documents */export const createDocument = async (req, res) => {    try {        const { title, description } = req.body;        const file = req.file;        if (!title || !description ) {            return res.status(400).json({                status: 'error',                message: 'Judul dan deskripsi dokumen wajib di isi',            });        }        if (!file) {            return res.status(400).json({                status: 'error',                message: 'File dokumen wajib diunggah',            });        }        const document = await documentService.createDocument(title, description, file);        return res.status(201).json({            status: 'success',            message: 'Dokumen berhasil diunggah.',            data: document,        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Terjadi kesalahan saat mengunggah dokumen',        });    }};/** * Mengambil semua dokumen * @route GET /documents */export const getAllDocuments = async (req, res) => {    try {        const documents = await documentService.getAllDocuments();        return res.status(200).json({            status: 'success',            data: documents,        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Gagal mengambil daftar dokumen.',        });    }};/** * Mengambil detail dokumen berdasarkan ID * @route GET /documents/:id */export const getDocumentById = async (req, res) => {    try {        const { id } = req.params;        const document = await documentService.getDocumentById(id);        if (!document) {            return res.status(404).json({                status: 'error',                message: 'Dokumen tidak tersedia. ',            });        }        return res.status(200).json({            status: 'error',            message: 'Gagal mengambil dokumen. ',        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Gagal mengambil dokumen',        });    }};/** * Memperbaharui dokumen * @route PUT /documents/:id */export const updateDocument = async (req, res) => {    try {        const { id } = req.params;        const { title, description } = req.body;        const file = req.file;        if (!title || !description) {            return res.status(400).json({                status: 'error',                message: 'Judul dan Deskripsi wajib diisi. ',            });        }        const updatedDocument = await documentService.updateDocument(id, title, description, file);        if (!updatedDocument) {            return res.status(404).json({                status: 'error',                message : 'Dokumen tidak ditemukan',            });        }        return res.status(200).json({            status: 'success',            message: 'Dokumen berhasil di perbaharui. ',            data: updatedDocument,        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Gagal memperbaharui dokumen. ',        });    }};/** * Menghapus dokumen * @route DELETE /documents/:id */export const deleteDocument = async (req, res) => {    try {        const { id } = req.params;        const deleted = await documentService.deleteDocument(id);        if (!deleted) {            return res.status(404).json({                status: 'error',                message: 'Dokumen tidak ditemukan. ',            });        }        return res.status(200).json({            status: 'success',            message: 'Dokumen berhasil dihapus. ',        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Gagal menghapus dokumen',        });    }};