import * as documentService from '../services/documentService.js';/** * Fungsi untuk membuat dokumen baru * @route POST /documents */export const createDocument = async (req, res) => {    try {        const { title } = req.body;        const file = req.file;        const userId = req.user?.id; // Diambil dari authMiddleware        // Validasi input        if (!title || title.trim() === '') {            return res.status(400).json({                status: 'error',                message: 'Judul dokumen wajib diisi',            });        }        if (!file) {            return res.status(400).json({                status: 'error',                message: 'File dokumen wajib diunggah',            });        }        if (!userId) {            return res.status(401).json({                status: 'error',                message: 'User tidak terautentikasi',            });        }        // Panggil service createDocument terbaru        const document = await documentService.createDocument(userId, file, title);        return res.status(201).json({            status: 'success',            message: 'Dokumen berhasil diunggah.',            data: document,        });    } catch (error) {        console.error('Error createDocument:', error);        return res.status(500).json({            status: 'error',            message: 'Terjadi kesalahan saat mengunggah dokumen',        });    }};/** * Mengambil semua dokumen milik user yang sedang login * @route GET /documents */export const getAllDocuments = async (req, res) => {    try {        const userId = req.user?.id;        if (!userId) {            return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });        }        // Kirim userId ke service untuk mengambil dokumen yang sesuai        const documents = await documentService.getAllDocuments(userId);        return res.status(200).json({            status: 'success',            data: documents,        });    } catch (error) {        console.error(error);        return res.status(500).json({            status: 'error',            message: 'Gagal mengambil daftar dokumen.',        });    }};/** * Mengambil detail dokumen berdasarkan ID, milik user yang sedang login * @route GET /documents/:id */export const getDocumentById = async (req, res) => {    try {        const { id: documentId } = req.params;        const userId = req.user?.id;        if (!userId) {            return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });        }        // Kirim documentId dan userId ke service        const document = await documentService.getDocumentById(documentId, userId);        // Service sudah menangani jika dokumen tidak ditemukan, jadi cek ini bisa disederhanakan        return res.status(200).json({            status: 'success',            message: 'Dokumen berhasil diambil.',            data: document,        });    } catch (error) {        // Service akan melempar error jika tidak ditemukan, kita tangkap di sini        return res.status(404).json({            status: 'error',            message: error.message,        });    }};/** * Memperbaharui dokumen * @route PATCH /documents/:id  (Lebih baik menggunakan PATCH untuk update sebagian) */export const updateDocument = async (req, res) => {    try {        const { id: documentId } = req.params;        const userId = req.user?.id;        const updates = req.body; // Ambil semua data dari body (misal: { title, status })        const newFile = req.file;        if (!userId) {            return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });        }        // Panggil service dengan parameter yang benar: documentId, userId, data update, dan file baru        const updatedDocument = await documentService.updateDocument(documentId, userId, updates, newFile);        return res.status(200).json({            status: 'success',            message: 'Dokumen berhasil diperbaharui.',            data: updatedDocument,        });    } catch (error) {        // Service akan melempar error jika tidak ditemukan, kita tangkap di sini        return res.status(404).json({            status: 'error',            message: error.message,        });    }};/** * Menghapus dokumen * @route DELETE /documents/:id */export const deleteDocument = async (req, res) => {    try {        const { id: documentId } = req.params;        const userId = req.user?.id;        if (!userId) {            return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });        }        // Panggil service dengan documentId dan userId        await documentService.deleteDocument(documentId, userId);        return res.status(200).json({            status: 'success',            message: 'Dokumen berhasil dihapus.',        });    } catch (error) {        // Service akan melempar error jika tidak ditemukan, kita tangkap di sini        return res.status(404).json({            status: 'error',            message: error.message,        });    }};/** * Fungsi untuk mengunggah dokumen yang sudah ditandatangani * @route POST /documents/:id/upload-signed */export const uploadSignedDocument = async (req, res) => {    try {        const documentId = req.params.id;        const signedFile = req.file;        const userId = req.user?.id;        if (!documentId) {            return res.status(400).json({                status: 'error',                message: 'ID dokumen wajib diisi',            });        }        if (!signedFile) {            return res.status(400).json({                status: 'error',                message: 'File dokumen yang sudah ditandatangani wajib diunggah',            });        }        if (!userId) {            return res.status(401).json({                status: 'error',                message: 'User tidak terautentikasi',            });        }        const document = await documentService.uploadSignedDocument(            documentId,            userId,            signedFile.buffer        );        return res.status(200).json({            status: 'success',            message: 'Dokumen hasil tanda tangan berhasil diunggah.',            data: document,        });    } catch (error) {        console.error('Error uploadSignedDocument:', error);        return res.status(500).json({            status: 'error',            message: 'Terjadi kesalahan saat mengunggah dokumen hasil tanda tangan',        });    }};