/** * @description Factory function yang membuat dan mengembalikan objek controller * dengan semua fungsi handler rute yang dibutuhkan. * @param {object} documentService - Instance dari DocumentService yang telah terinisialisasi. * @returns {object} - Objek yang berisi semua handler controller. */export const createDocumentController = (documentService) => {    return {        /**         * Fungsi untuk membuat dokumen baru         * @route POST /documents         */        createDocument: async (req, res) => {            try {                const { title } = req.body;                const file = req.file;                const userId = req.user?.id;                if (!title || title.trim() === '') {                    return res.status(400).json({ status: 'error', message: 'Judul dokumen wajib diisi' });                }                if (!file) {                    return res.status(400).json({ status: 'error', message: 'File dokumen wajib diunggah' });                }                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                const document = await documentService.createDocument(userId, file, title);                return res.status(201).json({ status: 'success', message: 'Dokumen berhasil diunggah.', data: document });            } catch (error) {                console.error('Error createDocument:', error);                return res.status(500).json({ status: 'error', message: 'Terjadi kesalahan saat mengunggah dokumen' });            }        },        /**         * Mengambil semua dokumen milik user yang sedang login         * @route GET /documents         */        getAllDocuments: async (req, res) => {            try {                const userId = req.user?.id;                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                const documents = await documentService.getAllDocuments(userId);                return res.status(200).json({ status: 'success', data: documents });            } catch (error) {                console.error(error);                return res.status(500).json({ status: 'error', message: 'Gagal mengambil daftar dokumen.' });            }        },        /**         * Mengambil detail dokumen berdasarkan ID, milik user yang sedang login         * @route GET /documents/:id         */        getDocumentById: async (req, res) => {            try {                const { id: documentId } = req.params;                const userId = req.user?.id;                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                const document = await documentService.getDocumentById(documentId, userId);                return res.status(200).json({ status: 'success', message: 'Dokumen berhasil diambil.', data: document });            } catch (error) {                return res.status(404).json({ status: 'error', message: error.message });            }        },        /**         * Memperbaharui dokumen         * @route PATCH /documents/:id         */        updateDocument: async (req, res) => {            try {                const { id: documentId } = req.params;                const userId = req.user?.id;                const updates = req.body;                const newFile = req.file;                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                const updatedDocument = await documentService.updateDocument(documentId, userId, updates, newFile);                return res.status(200).json({ status: 'success', message: 'Dokumen berhasil diperbaharui.', data: updatedDocument });            } catch (error) {                return res.status(404).json({ status: 'error', message: error.message });            }        },        /**         * Menghapus dokumen         * @route DELETE /documents/:id         */        deleteDocument: async (req, res) => {            try {                const { id: documentId } = req.params;                const userId = req.user?.id;                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                await documentService.deleteDocument(documentId, userId);                return res.status(200).json({ status: 'success', message: 'Dokumen berhasil dihapus.' });            } catch (error) {                return res.status(404).json({ status: 'error', message: error.message });            }        },        /**         * Fungsi untuk mengunggah dokumen yang sudah ditandatangani         * @route POST /documents/:id/upload-signed         */        uploadSignedDocument: async (req, res) => {            try {                const documentId = req.params.id;                const signedFile = req.file;                const userId = req.user?.id;                if (!documentId) {                    return res.status(400).json({ status: 'error', message: 'ID dokumen wajib diisi' });                }                if (!signedFile) {                    return res.status(400).json({ status: 'error', message: 'File dokumen yang sudah ditandatangani wajib diunggah' });                }                if (!userId) {                    return res.status(401).json({ status: 'error', message: 'User tidak terautentikasi' });                }                const document = await documentService.uploadSignedDocument(documentId, userId, signedFile.buffer);                return res.status(200).json({ status: 'success', message: 'Dokumen hasil tanda tangan berhasil diunggah.', data: document });            } catch (error) {                console.error('Error uploadSignedDocument:', error);                return res.status(500).json({ status: 'error', message: 'Terjadi kesalahan saat mengunggah dokumen hasil tanda tangan' });            }        }    };};