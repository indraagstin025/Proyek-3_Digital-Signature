import { validationResult } from "express-validator";export const createUserController = (userService) => {    return {        getMyProfile: async (req, res) => {            try {                const userId = req.user.id;                const user = await userService.getMyProfile(userId);                if (!user) {                    return res.status(404).json({ message: 'Profil user tidak ditemukan' });                }                res.status(200).json({ data: user });            } catch (error) {                console.error("Error fetching user profile:", error);                res.status(500).json({ message: 'Terjadi kesalahan pada server saat mengambil profil pengguna' });            }        },        createUser: async (req, res) => {            const errors = validationResult(req);            if (!errors.isEmpty()) {                return res.status(400).json({ errors: errors.array() });            }            try {                const { name, email, password } = req.body;                const newUser = await userService.createUser({ name, email, password });                const userResponse = {                    id: newUser.id,                    name: newUser.name,                    email: newUser.email,                    createdAt: newUser.createdAt                };                res.status(201).json({                    message: 'User berhasil dibuat',                    data: userResponse                });            } catch (error) {                console.error("Error creating user:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        },        // --- UPDATE PROFIL DENGAN HISTORY FOTO ---        updateMyProfile: async (req, res) => {            const errors = validationResult(req);            if (!errors.isEmpty()) {                return res.status(400).json({ errors: errors.array() });            }            try {                const userId = req.user.id;                const file = req.file;                const { profilePictureId, ...updateData } = req.body;                let updatedUser;                if (file) {                    // Case 1: Upload foto baru                    updatedUser = await userService.updateUserProfileWithNewPicture(                        userId,                        updateData,                        file                    );                } else if (profilePictureId) {                    // Case 2: Pakai foto lama dari history                    updatedUser = await userService.updateUserProfileWithOldPicture(                        userId,                        updateData,                        profilePictureId                    );                } else {                    // Case 3: Update data biasa tanpa ganti foto                    updatedUser = await userService.updateUserProfile(                        userId,                        updateData                    );                }                res.status(200).json({                    message: 'Profil berhasil diperbarui',                    data: updatedUser                });            } catch (error) {                console.error("Error updating user profile:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        },        // --- LIHAT SEMUA FOTO HISTORY ---        getProfilePictures: async (req, res) => {            try {                const userId = req.user.id;                const pictures = await userService.getUserProfilePictures(userId);                res.status(200).json({                    message: "Daftar foto profil berhasil diambil",                    data: pictures                });            } catch (error) {                console.error("Error fetching profile pictures:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        },        useOldProfilePicture: async (req, res) => {            try {                const userId = req.user.id;                const { pictureId } = req.params;                if (!pictureId || !/^[0-9a-fA-F-]{36}$/.test(pictureId)) {                    return res.status(400).json({ message: "ID foto profil tidak valid" });                }                const updatedUser = await userService.updateUserProfileWithOldPicture(                    userId,                    {},                    pictureId                );                res.status(200).json({                    message: "Foto profil berhasil diganti dengan foto lama",                    data: updatedUser                });            } catch (error) {                console.error("Error using old profile picture:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        },        // --- HAPUS FOTO DARI HISTORY ---        deleteProfilePicture: async (req, res) => {            try {                const userId = req.user.id;                const { pictureId } = req.params;                await userService.deleteUserProfilePicture(userId, pictureId);                res.status(200).json({                    message: "Foto profil berhasil dihapus dari history"                });            } catch (error) {                console.error("Error deleting profile picture:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        }    };};