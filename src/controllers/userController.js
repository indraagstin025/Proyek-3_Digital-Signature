import { validationResult } from "express-validator";export const createUserController = (userService) => {    return {        getMyProfile: async (req, res) => {            try {                const userId = req.user.id;                const user = await userService.getMyProfile(userId);                if (!user) {                    return res.status(404).json({ message: 'Profil user tidak ditemukan' });                }                res.status(200).json({ data: user });            } catch (error) {                console.error("Error fetching user profile:", error);                res.status(500).json({ message: 'Terjadi kesalahan pada server saat mengambil profil pengguna' });            }        },        createUser: async (req, res) => {            const errors = validationResult(req);            if (!errors.isEmpty()) {                // Perbaikan: Menghapus koma (,) yang salah                return res.status(400).json({ errors: errors.array() });            }            try {                const { name, email, password } = req.body;                const newUser = await userService.createUser({ name, email, password });                const userResponse = {                    id: newUser.id,                    name: newUser.name,                    email: newUser.email,                    createdAt: newUser.createdAt                };                res.status(201).json({                    message: 'User berhasil dibuat',                    data: userResponse                });            } catch (error) {                console.error("Error creating user:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server'});            }        },        // --- FUNGSI BARU UNTUK UPDATE PROFIL ---        updateMyProfile: async (req, res) => {            // 1. Cek hasil validasi dari rute            const errors = validationResult(req);            if (!errors.isEmpty()) {                return res.status(400).json({ errors: errors.array() });            }            try {                // 2. Ambil ID user dari middleware otentikasi                const userId = req.user.id;                const file = req.file;                // 3. Panggil service untuk memperbarui profil                const updatedUser = await userService.updateUserProfile(userId, req.body, file);                // 4. Kirim respons sukses dengan data yang sudah diperbarui                res.status(200).json({                    message: 'Profil berhasil diperbarui',                    data: updatedUser                });            } catch (error) {                console.error("Error updating user profile:", error);                res.status(500).json({ message: error.message || 'Terjadi kesalahan pada server' });            }        }    };};