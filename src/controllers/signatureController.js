/** * @description Factory function yang membuat dan mengembalikan objek controller * dengan semua fungsi handler rute yang dibutuhkan. * @param {object} signatureService - Instance dari SignatureService yang telah terinisialisasi. * @returns {object} - Objek yang berisi semua handler controller. */export const createSignatureController = (signatureService) => {    return {        /**         * @description Menangani permintaan untuk menandatangani dokumen.         */        handleSignDocument: async (req, res) => {            try {                const { id: documentId } = req.params;                const { userId } = req.user;                const { method, signatureImage, placements } = req.body;                if (!method || !placements) {                    return res.status(400).json({                        message: 'Method (method) dan data penempatan (placements) diperlukan.'                    });                }                const result = await signatureService.signDocument(documentId, userId, {                    method,                    signatureImage,                    placements                });                res.status(200).json({                    message: 'Dokumen berhasil ditandatangani dan disimpan. ',                    data: result                });            } catch (error) {                console.error("Controller Error- handlerSignDocument:", error);                res.status(500).json({                    message: 'Terjadi kesalahan server.',                    error: error.message                });            }        },        /**         * @description Menangani verifikasi tanda tangan dari QR Code.         */        handleVerifySignature: async (req, res) => {            try {                const { docId, userId } = req.query;                if (!docId || !userId) {                    return res.status(400).json({                        message: 'Parameter docId dan UserId diperlukan untuk verifikasi. '                    });                }                const result = await signatureService.VerifySignature(docId, userId);                res.status(200).json(result);            } catch (error) {                console.error("Controller Error - handleVerifySignature:", error);                res.status(500).json({                    message: 'Terjadi kesalahan di server. ',                    error: error.message                });            }        }    };};