// src/repositories/PrismaUserRepository.jsimport { PrismaClient } from '@prisma/client';import UserRepository from './UserRepository.js';import bcrypt from 'bcrypt';const prisma = new PrismaClient();class PrismaUserRepository extends UserRepository {    async createUser(userData) {        try {            const hashedPassword = await bcrypt.hash(userData.password, 10);            return await prisma.user.create({                data: {                    name: userData.name,                    email: userData.email,                    password: hashedPassword,                },            });        } catch (error) {            if (error.code === 'P2002') {                throw new Error('Email sudah terdaftar.');            }            throw error;        }    }    async findById(id) {        return await prisma.user.findUnique({            where: { id },            select: {                id: true,                email: true,                name: true,                phoneNumber: true,                title: true,                address: true,                profilePictureUrl: true,                isSuperAdmin: true,                createdAt: true,            }        });    }    async findAll() {        return await prisma.user.findMany({            select: {                id: true,                email: true,                name: true,                isSuperAdmin: true,                createdAt: true,            }        });    }    // --- METODE BARU DITAMBAHKAN DI SINI ---    async update(id, userData) {        // Jika ada password baru yang dikirim, hash password tersebut        if (userData.password) {            userData.password = await bcrypt.hash(userData.password, 10);        }        return await prisma.user.update({            where: { id },            data: userData,            select: {                id: true,                email: true,                name: true,                phoneNumber: true,                title: true,                profilePictureUrl: true,                address: true,                updatedAt: true,            }        });    }}export default PrismaUserRepository;