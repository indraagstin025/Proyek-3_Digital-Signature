import { supabase } from '../config/supabaseClient.js';import { PrismaClient } from '@prisma/client';import AuthRepository from './AuthRepository.js';import { createClient } from '@supabase/supabase-js';import {jwtDecode} from "jwt-decode";import bcrypt from "bcrypt";const prisma = new PrismaClient();class SupabaseAuthRepository extends AuthRepository {    constructor() {        super();        this.supabaseClient = supabase;    }    /**     * @description Mendaftarkan pengguna baru ke Supabase Auth dan menyimpannya ke database lokal.     */    async registerUser(email, password, additionalData) {        const existingUser = await prisma.user.findUnique({            where: {email},        });        if (existingUser) {            throw new Error("Email sudah terdaftar. Silakan gunakan email lain.");        }        const {data: authData, error: authError} = await supabase.auth.signUp({            email,            password,        });        if (authError) {            throw new Error("Gagal mendaftarkan user di Supabase: " + authError.message);        }        if (!authData.user) {            throw new Error("Registrasi Supabase berhasil namun data user tidak ditemukan.");        }        const hashedPassword = await bcrypt.hash(password, 10);        const newUserData = {            id: authData.user.id,            email: authData.user.email,            name: additionalData.name,            password: hashedPassword,            phoneNumber: additionalData.phoneNumber,            address: additionalData.address,        };        try {            const localUser = await prisma.user.create({data: newUserData});            return localUser;        } catch (dbError) {            console.error("User di Supabase sudah dibuat, tapi gagal simpan ke DB lokal:", dbError);            await supabase.auth.admin.deleteUser(authData.user.id);            throw new Error("Gagal menyimpan data pengguna. Silakan coba lagi.");        }    }    /**     * @description Mengautentikasi pengguna dan mengambil data dari database lokal.     */    async loginUser(email, password) {        const {data: authData, error: authError} = await supabase.auth.signInWithPassword({            email: email,            password: password,        });        if (authError) {            throw new Error(authError.message);        }        if (!authData.user) {            throw new Error("Login gagal: User tidak ditemukan.");        }        const localUser = await prisma.user.findUnique({            where: {id: authData.user.id},            select: {                id: true,                email: true,                name: true,                isSuperAdmin: true,            },        });        if (!localUser) {            throw new Error("Data pengguna tidak ditemukan di database lokal.");        }        return {            session: authData.session,            user: localUser,        };    }    /**     * @description Melakukan logout dari Supabase.     */    async logoutUser() {        const {error} = await supabase.auth.signOut();        if (error) {            console.error("Logout error:", error);            throw new Error('Gagal melakukan Logout: ' + error.message);        }        return {message: 'Logout Berhasil'};    }    /**     * @description Meminta email untuk reset password.     */    async forgotPassword(email) {        const {error} = await supabase.auth.resetPasswordForEmail(email, {            redirectTo: process.env.RESET_PASSWORD_URL,        });        if (error) {            console.error("Forgot password error:", error);            return {data: null, error};        }        return {            data: {message: 'Jika email terdaftar, link untuk reset password sudah dikirimkan.'},            error: null,        };    }    /**     * @description Mengubah password pengguna setelah verifikasi token dari email.     * (Menggunakan alur yang direkomendasikan untuk backend)     */    async resetPassword(token, newPassword) {        if (!token) {            throw new Error("Token otorisasi diperlukan.");        }        if (!newPassword) {            throw new Error("Password baru diperlukan.");        }        try {            // ðŸ”¹ Decode token JWT            const decoded = jwtDecode(token);            const userId = decoded.sub; // userId ada di "sub"            const exp = decoded.exp;    // expiry timestamp (detik)            // ðŸ”¹ Cek apakah sudah expired            if (!exp || Date.now() >= exp * 1000) {                throw new Error("Token sudah kedaluwarsa. Silakan minta link reset baru.");            }            if (!userId) {                throw new Error("Token tidak valid: userId tidak ditemukan.");            }            // ðŸ”¹ Update password dengan Admin API            const { data: updatedUser, error: updateError } =                await this.supabaseClient.auth.admin.updateUserById(userId, {                    password: newPassword,                });            if (updateError) {                console.error("Reset password error (updateUserById):", updateError.message);                throw new Error("Gagal memperbarui password: " + updateError.message);            }            const hashedNewPassword = await bcrypt.hash(newPassword, 10);            await prisma.user.update({                where: { id: userId },                data: { password: hashedNewPassword }            });            return { message: "Password berhasil diubah.", data: updatedUser };        } catch (err) {            console.error("Reset password exception:", err.message);            throw new Error(err.message || "Terjadi kesalahan saat mereset password.");        }    }}export default SupabaseAuthRepository;