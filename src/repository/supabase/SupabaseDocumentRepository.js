import { supabase, supabaseBucket } from '../../config/supabaseClient.js';import { PrismaClient } from '@prisma/client';import DocumentRepository from '../interface/DocumentRepository.js';const prisma = new PrismaClient();/** * @description Implementasi DocumentRepository menggunakan Supabase + Prisma. */class SupabaseDocumentRepository extends DocumentRepository {    async create(data) {        return prisma.document.create({ data });    }    async findByUserId(userId) {        return prisma.document.findMany({            where: { userId },            orderBy: { createdAt: 'desc' },        });    }    async findById(documentId, userId) {        return prisma.document.findFirst({            where: { id: documentId, userId },        });    }    async update(documentId, data) {        return prisma.document.update({ where: { id: documentId }, data });    }    async remove(documentId) {        return prisma.document.delete({ where: { id: documentId } });    }    async uploadFile(filePath, buffer, contentType) {        const fullPath = `document_user/${filePath}`;        const { error } = await supabase.storage            .from(supabaseBucket)            .upload(fullPath, buffer, { contentType, upsert: true });        if (error) throw new Error(`Upload gagal: ${error.message}`);        return fullPath;    }    async getFilePublicUrl(filePath) {        const { data } = supabase.storage.from(supabaseBucket).getPublicUrl(filePath);        return data?.publicUrl || null;    }    async deleteFile(filePath) {        const { error } = await supabase.storage.from(supabaseBucket).remove([filePath]);        if (error) throw new Error(`Hapus file gagal: ${error.message}`);    }}export default SupabaseDocumentRepository;