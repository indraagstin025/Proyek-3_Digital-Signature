import { supabase } from '../../config/supabaseClient.js';import { PrismaClient } from '@prisma/client';import AuthRepository from '../interface/AuthRepository.js';import { jwtDecode } from 'jwt-decode';import AuthError from "../../errors/AuthError.js";import CommonError from "../../errors/CommonError.js";const prisma = new PrismaClient();/** * @description Implementasi AuthRepository menggunakan Supabase Auth + Prisma. */class SupabaseAuthRepository extends AuthRepository {    constructor() {        super();        this.supabaseClient = supabase;    }    async registerUser(email, password, additionalData) {        const existingUser = await prisma.user.findUnique({ where: { email } });        if (existingUser) {            // Gunakan error spesifik untuk logika bisnis            throw AuthError.EmailAlreadyExist();        }        const { data: authData, error: authError } = await this.supabaseClient.auth.signUp({            email,            password,        });        // Gunakan error umum untuk kesalahan teknis dari layanan eksternal        if (authError) throw CommonError.SupabaseError(`Supabase signup gagal: ${authError.message}`);        if (!authData.user) throw CommonError.InternalServerError('Registrasi berhasil tapi user Supabase tidak ditemukan.');        const newUserData = {            id: authData.user.id,            email: authData.user.email,            name: additionalData.name,            phoneNumber: additionalData.phoneNumber,            address: additionalData.address,        };        try {            return await prisma.user.create({ data: newUserData });        } catch (dbError) {            console.error('Supabase user dibuat, tapi DB lokal gagal:', dbError);            // Rollback            await this.supabaseClient.auth.admin.deleteUser(authData.user.id);            // Gunakan error umum untuk kesalahan database            throw CommonError.DatabaseError('Gagal menyimpan data pengguna lokal.');        }    }    async loginUser(email, password) {        // Fungsi retry Anda sudah bagus, tidak perlu diubah.        async function withRetry(fn, retries = 3, delay = 2000) { /* ... implementasi retry ... */ }        try {            const { data: authData, error: authError } = await this.supabaseClient.auth.signInWithPassword({ email, password });            // Map error spesifik dari Supabase ke error bisnis kita            if (authError) {                if (authError.message.includes('Invalid login credentials')) {                    throw AuthError.InvalidCredentials();                }                throw CommonError.SupabaseError(authError.message);            }            if (!authData.user) throw CommonError.InternalServerError('Login gagal: user Supabase tidak ditemukan.');            const localUser = await prisma.user.findUnique({                where: { id: authData.user.id },                select: { id: true, email: true, name: true, isSuperAdmin: true },            });            // Ini menandakan ada inkonsistensi data, error yang sangat spesifik            if (!localUser) throw AuthError.UserNotFound('User terautentikasi di Supabase tapi tidak ditemukan di database lokal.');            return { session: authData.session, user: localUser };        } catch (err) {            // Jika error sudah merupakan error kustom kita, lempar kembali            if (err instanceof AuthError || err instanceof CommonError) {                throw err;            }            // Tangani error jaringan khusus            if (err.code === 'UND_ERR_CONNECT_TIMEOUT' || err.message?.includes('fetch failed')) {                throw CommonError.NetworkError();            }            // Fallback untuk error lain yang tidak terduga            throw CommonError.InternalServerError(err.message);        }    }    async logoutUser() {        const { error } = await this.supabaseClient.auth.signOut();        if (error) throw CommonError.SupabaseError(`Logout gagal: ${error.message}`);        return { message: 'Logout berhasil' };    }    async forgotPassword(email) {        const { error } = await this.supabaseClient.auth.resetPasswordForEmail(email, {            redirectTo: process.env.RESET_PASSWORD_URL,        });        // Ubah pola return menjadi throw agar konsisten        if (error) throw CommonError.SupabaseError(error.message);        return { message: 'Jika email terdaftar, link reset terkirim.' };    }    async resetPassword(token, newPassword) {        if (!token || !newPassword) {            // Error karena input buruk dari client            throw CommonError.BadRequest('Token dan password baru wajib diisi.');        }        try {            const decoded = jwtDecode(token);            const userId = decoded.sub;            const exp = decoded.exp;            if (!exp || Date.now() >= exp * 1000) throw AuthError.ResetPasswordExpired();            if (!userId) throw AuthError.ResetPasswordInvalid();            const { data: updatedUser, error: updateError } =                await this.supabaseClient.auth.admin.updateUserById(userId, { password: newPassword });            if (updateError) throw CommonError.SupabaseError(`Gagal update password Supabase: ${updateError.message}`);            return { message: 'Password berhasil diubah.', data: updatedUser };        } catch (jwtError) {            // Menangkap error dari jwtDecode jika token tidak valid sama sekali            throw AuthError.ResetPasswordInvalid();        }    }}export default SupabaseAuthRepository;