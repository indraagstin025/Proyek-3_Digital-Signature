import { supabase } from '../../config/supabaseClient.js';import { PrismaClient } from '@prisma/client';import AuthRepository from '../interface/AuthRepository.js';import { jwtDecode } from 'jwt-decode';import bcrypt from 'bcrypt';const prisma = new PrismaClient();/** * @description Implementasi AuthRepository menggunakan Supabase Auth + Prisma. */class SupabaseAuthRepository extends AuthRepository {    constructor() {        super();        this.supabaseClient = supabase;    }    /**     * Mendaftarkan pengguna baru ke Supabase Auth + DB lokal.     * @param {string} email     * @param {string} password     * @param {object} additionalData     * @returns {Promise<object>}     */    async registerUser(email, password, additionalData) {        const existingUser = await prisma.user.findUnique({ where: { email } });        if (existingUser) {            throw new Error('Email sudah terdaftar. Silakan gunakan email lain.');        }        const { data: authData, error: authError } = await this.supabaseClient.auth.signUp({            email,            password,        });        if (authError) throw new Error(`Supabase signup gagal: ${authError.message}`);        if (!authData.user) throw new Error('Registrasi berhasil tapi user Supabase tidak ditemukan.');        const newUserData = {            id: authData.user.id,            email: authData.user.email,            name: additionalData.name,            phoneNumber: additionalData.phoneNumber,            address: additionalData.address,        };        try {            return prisma.user.create({ data: newUserData });        } catch (dbError) {            console.error('Supabase user dibuat, tapi DB lokal gagal:', dbError);            await this.supabaseClient.auth.admin.deleteUser(authData.user.id);            throw new Error('Gagal menyimpan data pengguna lokal.');        }    }    /**     * Login user & ambil data dari DB lokal.     * @param {string} email     * @param {string} password     * @returns {Promise<object>}     */    async loginUser(email, password) {        // Helper retry        async function withRetry(fn, retries = 3, delay = 2000) {            for (let i = 0; i < retries; i++) {                try {                    return await fn();                } catch (err) {                    if (i === retries - 1) throw err;                    console.warn(`⚠️ Supabase fetch gagal, retry ke-${i + 1}...`);                    await new Promise((res) => setTimeout(res, delay));                }            }        }        try {            const { data: authData, error: authError } = await withRetry(() =>                this.supabaseClient.auth.signInWithPassword({ email, password })            );            if (authError) throw new Error(authError.message);            if (!authData.user) throw new Error('Login gagal: user Supabase tidak ditemukan.');            // Cari user di DB lokal            const localUser = await prisma.user.findUnique({                where: { id: authData.user.id },                select: { id: true, email: true, name: true, isSuperAdmin: true },            });            if (!localUser) throw new Error('User tidak ditemukan di DB lokal.');            return { session: authData.session, user: localUser };        } catch (err) {            // 🔹 Tangani error jaringan khusus            if (                err.code === 'UND_ERR_CONNECT_TIMEOUT' ||                err.message?.includes('fetch failed')            ) {                throw new Error('Koneksi ke server lambat atau tidak stabil. Coba lagi.');            }            // Error biasa (misalnya password salah)            throw err;        }    }    /** Logout dari Supabase */    async logoutUser() {        const { error } = await this.supabaseClient.auth.signOut();        if (error) throw new Error(`Logout gagal: ${error.message}`);        return { message: 'Logout berhasil' };    }    /** Minta email reset password */    async forgotPassword(email) {        const { error } = await this.supabaseClient.auth.resetPasswordForEmail(email, {            redirectTo: process.env.RESET_PASSWORD_URL,        });        if (error) return { data: null, error };        return { data: { message: 'Jika email terdaftar, link reset terkirim.' }, error: null };    }    /** Reset password via token */    async resetPassword(token, newPassword) {        if (!token) throw new Error('Token wajib.');        if (!newPassword) throw new Error('Password baru wajib.');        const decoded = jwtDecode(token);        const userId = decoded.sub;        const exp = decoded.exp;        if (!exp || Date.now() >= exp * 1000) throw new Error('Token reset kedaluwarsa.');        if (!userId) throw new Error('Token tidak valid.');        const { data: updatedUser, error: updateError } =            await this.supabaseClient.auth.admin.updateUserById(userId, { password: newPassword });        if (updateError) throw new Error(`Gagal update password Supabase: ${updateError.message}`);        return { message: 'Password berhasil diubah.', data: updatedUser };    }}export default SupabaseAuthRepository;