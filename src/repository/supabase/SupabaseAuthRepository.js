import AuthRepository from "../interface/AuthRepository.js";import AuthError from "../../errors/AuthError.js";import CommonError from "../../errors/CommonError.js"; // Kita butuh CommonError juga/** * @description Implementasi AuthRepository menggunakan Supabase Auth + Prisma. * Lapisan ini bertanggung jawab menerjemahkan error dari Supabase/Prisma ke AuthError/CommonError. */class SupabaseAuthRepository extends AuthRepository {    constructor(supabaseClient, prismaClient) {        super();        if (!supabaseClient) throw CommonError.InternalServerError("SupabaseClient harus disediakan.");        if (!prismaClient) throw CommonError.InternalServerError("PrismaClient harus disediakan.");        this.supabaseClient = supabaseClient;        this.prisma = prismaClient;    }    /** REGISTER */    async registerUser(email, password, additionalData) {        try {            // 1. Panggil Supabase untuk membuat user auth            const { data: authData, error: authError } = await this.supabaseClient.auth.signUp({                email,                password,            });            // =============================================            // == PENERJEMAHAN ERROR SUPABASE DIMULAI SINI ==            // =============================================            if (authError) {                if (authError.message.includes("User already registered")) {                    throw AuthError.EmailAlreadyExist(); // Pesan error bersih                }                if (authError.message.includes("Password should be at least")) {                    throw AuthError.PasswordTooWeak(authError.message); // Boleh sertakan detail                }                // Untuk error Supabase lainnya yang tidak terduga                throw AuthError.SupabaseError(authError.message);            }            if (!authData.user) {                throw AuthError.SupabaseError("Registrasi Supabase berhasil tapi user tidak ditemukan.");            }            // 2. Simpan data user ke database lokal (Prisma)            const newUserData = {                id: authData.user.id,                email: authData.user.email,                name: additionalData.name,                phoneNumber: additionalData.phoneNumber,                address: additionalData.address,            };            return await this.prisma.user.create({ data: newUserData });        } catch (dbError) {            // Jika error sudah merupakan AuthError, lempar kembali.            if (dbError instanceof AuthError) {                throw dbError;            }            // Menangani error dari Prisma (misal: koneksi db putus)            // Rollback: hapus user di Supabase jika create di Prisma gagal.            if (dbError.config?.data?.authData?.user?.id) { // Cek jika ada user id untuk dihapus                await this.supabaseClient.auth.admin.deleteUser(dbError.config.data.authData.user.id);            }            throw CommonError.DatabaseError("Gagal menyimpan data pengguna ke database lokal.");        }    }    /** LOGIN */    async loginUser(email, password) {        try {            const { data, error } = await this.supabaseClient.auth.signInWithPassword({                email,                password,            });            // =============================================            // == PENERJEMAHAN ERROR SUPABASE DIMULAI SINI ==            // =============================================            if (error) {                if (error.message.includes("Invalid login credentials")) {                    throw AuthError.InvalidCredentials(); // Pesan error bersih                }                // Untuk error lain dari Supabase saat login                throw AuthError.SupabaseError(error.message);            }            if (!data.user || !data.session) {                throw AuthError.UserNotFound();            }            // Ambil data user dari database lokal            const localUser = await this.prisma.user.findUnique({                where: { id: data.user.id },                select: { id: true, email: true, name: true, isSuperAdmin: true },            });            if (!localUser) {                // Kasus aneh: user ada di Supabase Auth tapi tidak ada di tabel User kita.                throw AuthError.UserNotFound("Autentikasi berhasil, tapi data user tidak ditemukan di sistem.");            }            return { session: data.session, user: localUser };        } catch (err) {            // Jika error sudah merupakan AuthError, lempar kembali.            if (err instanceof AuthError) {                throw err;            }            // Menangani error level bawah seperti network            if (err.message?.includes("fetch failed")) {                throw CommonError.NetworkError("Gagal menghubungi server autentikasi.");            }            throw CommonError.InternalServerError(err.message);        }    }    /** LOGOUT */    async logoutUser() {        const { error } = await this.supabaseClient.auth.signOut();        if (error) {            // Beri pesan error yang lebih umum dan aman            throw AuthError.SupabaseError("Terjadi kesalahan saat proses logout.");        }        return { message: "Logout berhasil" };    }    /** FORGOT PASSWORD */    async forgotPassword(email) {        const { error } = await this.supabaseClient.auth.resetPasswordForEmail(email, {            redirectTo: process.env.RESET_PASSWORD_URL,        });        if (error) {            throw AuthError.SupabaseError("Gagal memproses permintaan reset password.");        }        return { message: "Jika email terdaftar, link reset terkirim." };    }    /** RESET PASSWORD */    async resetPassword(token, newPassword) {        try {            // Langkah 1: Verifikasi token dan dapatkan data user (termasuk ID)            const { data: userData, error: userError } = await this.supabaseClient.auth.getUser(token);            if (userError) {                if (userError.message.includes("expired")) {                    throw AuthError.ResetPasswordExpired();                }                throw AuthError.ResetPasswordInvalid();            }            const userId = userData.user.id;            // Langkah 2: Gunakan fungsi admin yang benar 'updateUserById' untuk mengubah password            const { error: updateError } = await this.supabaseClient.auth.admin.updateUserById(                userId,                { password: newPassword }            );            if (updateError) {                throw AuthError.SupabaseError(`Gagal memperbarui password: ${updateError.message}`);            }            return { message: "Password berhasil diubah." };        } catch (err) {            // Jika error sudah merupakan AuthError, lempar kembali.            if (err instanceof AuthError) {                throw err;            }            // Untuk error tak terduga lainnya            throw CommonError.InternalServerError(err.message);        }    }}export default SupabaseAuthRepository;