import path from "path";/** * @description Abstraksi untuk operasi penyimpanan file (unggah, unduh, hapus) menggunakan Supabase Storage. */class FileStorage {    /**     * @param {import('@supabase/supabase-js').SupabaseClient} supabaseClient - Instance Supabase     */    constructor(supabaseClient) {        if (!supabaseClient) {            throw new Error("Supabase client harus diberikan.");        }        this.supabase = supabaseClient;        this.bucketName = "profile-bucket"; // sesuaikan dengan nama bucket di Supabase    }    /**     * Unduh file dari storage     * @param {string} filePath - Lokasi file di storage     * @returns {Promise<Buffer>} Isi file     */    async downloadFile(filePath) {        const { data, error } = await this.supabase.storage            .from(this.bucketName)            .download(filePath);        if (error) throw new Error(`Gagal download file: ${error.message}`);        return Buffer.from(await data.arrayBuffer());    }    /**     * Upload file ke storage     * @param {string} filePath - Lokasi file di storage     * @param {Buffer} buffer - Isi file     * @param {string} contentType - MIME type file     * @returns {Promise<void>}     */    async uploadFile(filePath, buffer, contentType) {        const { error } = await this.supabase.storage            .from(this.bucketName)            .upload(filePath, buffer, { contentType, upsert: true });        if (error) throw new Error(`Gagal upload file: ${error.message}`);    }    /**     * Upload foto profil dan kembalikan URL publik     * @param {object} file - File dari multer (req.file)     * @param {string} userId - ID pengguna untuk nama file unik     * @returns {Promise<string>} URL publik file     */    async uploadProfilePicture(file, userId) {        const ext = path.extname(file.originalname);        const fileName = `${userId}-${Date.now()}${ext}`;        const filePath = `profile/${fileName}`;        // Upload ke Supabase        const { error } = await this.supabase.storage            .from(this.bucketName)            .upload(filePath, file.buffer, {                contentType: file.mimetype,                upsert: true,            });        if (error) throw new Error(`Gagal upload ke Supabase: ${error.message}`);        // Ambil public URL        const { publicUrl, error: urlError } = this.supabase.storage            .from(this.bucketName)            .getPublicUrl(filePath);        if (urlError) throw new Error(`Gagal mendapatkan public URL: ${urlError.message}`);        return publicUrl; // ✅ selalu string → aman untuk Prisma    }    /**     * Hapus file dari storage     * @param {string} fileUrl - URL publik file     */    async deleteFile(fileUrl) {        try {            const url = new URL(fileUrl);            const filePath = url.pathname.replace(/^\/+/, ""); // hapus leading slash            const { error } = await this.supabase.storage                .from(this.bucketName)                .remove([filePath]);            if (error) console.warn("Gagal hapus file Supabase:", error.message);        } catch (err) {            console.warn("URL tidak valid, tidak bisa dihapus:", err.message);        }    }}export default FileStorage;