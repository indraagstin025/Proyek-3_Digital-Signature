/** * @description Abstraksi untuk Operasi pada entitas 'DocumentVersion'. * Mendefinisikan kontrak yang harus diikuti oleh implementasi konkret (misal: PrismaVersionRepository). */export class VersionRepository {    /**     * @description Membuat record versi dokumen baru.     * @param {object} data - Data versi, termasuk documentId, userId, url, dan hash.     * @returns {Promise<object>}     */    async create(data) {        throw new Error('Metode create belum diimplementasikan.');    }    /**     * @description Menemukan versi berdasarkan ID user dan hash file.     * @param {string} userId     * @param {string} hash     * @returns {Promise<object|null>}     */    async findByUserAndHash(userId, hash) {        throw new Error('Metode findByUserAndHash belum diimplementasikan');    }    /**     * @description Menemukan satu versi berdasarkan ID-nya.     * @param {string} versionId     * @returns {Promise<object|null>}     */    async findById(versionId) {        throw new Error('Metode findById belum diimplementasikan.');    }    /**     * @description Menemukan semua versi dari satu dokumen.     * @param {string} documentId     * @returns {Promise<object[]>}     */    async findAllByDocumentId(documentId) {        throw new Error('Metode findAllByDocumentId belum diimplementasikan.');    }    // ++ TAMBAHKAN FUNGSI INI ++    /**     * @description Memperbarui data pada record versi dokumen.     * @param {string} versionId - ID versi yang akan diperbarui.     * @param {object} data - Data untuk diperbarui (misal: { signedFileHash: '...' }).     * @returns {Promise<object>}     */    async update(versionId, data) {        throw new Error('Metode update belum diimplementasikan.');    }    /**     * @description Menghapus satu versi berdasarkan ID-nya.     * @param {string} versionId     * @returns {Promise<void>}     */    async deleteById(versionId) {        throw new Error('Metode deleteById belum diimplementasikan.');    }}