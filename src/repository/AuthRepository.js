/** * @description Abstraksi untuk operasi autentikasi pengguna * Kelas ini berfungsi sebagai kontrak (interface) yang harus diikuti oleh * semua implementasi repository (misalnya, Supabase, Firebase, dll). * Tujuannya adalah untuk memisahkan logika bisnis dari detail penyimapanan data. * sehingga kode leboh fleksibel dan mudah diuji. */class AuthRepository {    /**     * @description Mendaftarkan pengguna baru.     * @param {string} email - Eamil pengguna     * @param {string} password - Kata sandi pengguna     * @param {object} additionalData - Data tambahan pengguna seperti (nama, email dan lain lain).     * @returns {Promise<object>} - Mengembalikan data pengguna yang baru didaftarkan     */    async registerUser(email, password, additionalData) {        throw new Error('Metode RegisterUser belum diimplementasikan.');    }    /**     * @description Mengautentikasi pengguna     * @param {string} email - Email Pengguna     * @param {string} password - Kata sandi pengguna     * @returns {Promise<object>} - Mengembalikan data sesi dan pengguna     */    async loginUser(email, password) {        throw new Error('Metode loginUser belum diimplementasikan. ');    }    /**     * @description Melakukan logout pengguna     * @returns {Promise<object>}     */    async resetPassword(token, newPassword) {        throw new Error('Metode resetPassword belum diimplementasikan. ');    }}export default AuthRepository;