import {supabase, supabaseBucket} from "../config/supabaseClient.js";import { PrismaClient } from '@prisma/client';import DocumentRepository from './DocumentRepository.js';const prisma = new PrismaClient(); export class SupabaseDocumentRepository extends DocumentRepository {    async create(data) {        return prisma.document.create({ data });    }    async findByUserId(userId) {        return prisma.document.findMany({            where: { userId }, orderBy: {createdAt: 'desc'},        });    }    async findById(documentId, userId) {        return prisma.document.findFirst({            where: { id: documentId, userId },        });    }    async update(documentId, data) {        return prisma.document.update({            where: { id: documentId },            data,        });    }    async remove(documentId) {        return prisma.document.delete({ where: { id: documentId } });    }    async uploadFile(filePath, buffer, contentType) {        const fullPath = `document_user/${filePath}`;        console.log("DEBUG upload path:", fullPath);        const { error: uploadError } = await supabase.storage            .from(supabaseBucket)            .upload(filePath, buffer, { contentType, upsert: true });        if (uploadError) {            throw new Error(`Gagal mengunggah file: ${uploadError.message}`);        }        return filePath;    }    async getFilePublicUrl(filePath){        const { data } = supabase.storage            .from(supabaseBucket)            .getPublicUrl(filePath);        return data?.publicUrl || null;    }    async deleteFile(filePath) {        const {error: removeError} = await supabase.storage            .from(supabaseBucket)            .remove([filePath]);        if (removeError) {            throw new Error(`Gagal menghapus file dari Storage: ${removeError.message}`);        }    }}export default SupabaseDocumentRepository;